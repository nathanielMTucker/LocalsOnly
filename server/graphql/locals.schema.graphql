

type User @collection(name: "users") {
    name : String
    authID : String
    email : String
    localTo : String
    softLocalTo : [String]
    owns : [ID]
    birthday : Birthday
}

type Birthday @embedded {
    day : Int,
    month : Int,
    year : Int
}


type Local @collection(name: "locals"){
    name : String!
    owner : ID!
    description : String!
    reviews : [Reviews!]
    reviewCount : Int
    rating : Int
    hashtags : [String!]
    searchTags : [String!]
    address : Address
    price : Int
    hours : Hours
    localsOnly : Boolean
    website : String
    phoneNumber : String
    geo : Geo
    quick : Quick
    city : String!
    state : String!

}



type Quick @embedded {
    twentyOnePlus : Boolean
    familyFriendly : Boolean
    takeout : Boolean
    dineIn : Boolean
    delivery : Boolean
    dogFriendly : Boolean
} 

type Address @embedded {
    street : String
    apt : String
    city : String
    state : String
    zip : String
}
type Hours @embedded{
    monday : Day
    tuesday : Day
    wednesday : Day
    thursday : Day
    friday : Day
    saturday : Day
    sunday : Day
}
type Day @embedded{
    from : String
    to : String
    closed : Boolean
}
type Reviews @embedded {
    rating : Int!
    review : String
}

type Geo @embedded{
    lat : String!
    lng : String!
}



type Query {
    allLocals : [Local]
    allUsers : [User]
    userAuth(authID : String!) : User
    localByLocation(city : String!, state : String!) : [Local]
}

# type Mutation {
#     addUserOwns(user : ID!, local : ID!) : User
#     updateUserOwns(user : ID!, local : ID!)
# }

# type PartialUpdateUserInput {
#     owns : 
# }

#local: 283920193849131532
#user: 284554644917584396