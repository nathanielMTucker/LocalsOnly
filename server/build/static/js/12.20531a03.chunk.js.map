{"version":3,"sources":["Components/Picture.jsx","Components/ImageForm.jsx","Pages/ImageUpload.jsx"],"names":["Picture","id","publicId","ImageProfileForm","withUser","user","setImage","image","DisplaySelectedImages","images","setImages","className","title","onClick","e","src","URL","createObjectURL","alt","type","name","onChange","preventDefault","files","target","console","dir","avatar","cloudName","secure","upload_preset","preset","ImageForm","folder","multiple","callback","useState","uploading","setUploading","uploadImages","a","log","form","FormData","imageURLs","map","append","fetch","method","body","then","res","json","file","public_id","Promise","all","awaitURLs","removeImage","persist","index","Number","filter","onSubmit","currentImages","compose","search","location","queryString","parse","localID","uploadURLs","imageIDs","axios","post","ownerID","status","catch","err"],"mappings":"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","file":"static/js/12.20531a03.chunk.js","sourcesContent":["import React from 'react'\nimport {Image} from 'cloudinary-react';\n\nconst Picture = ({id}) => {\n    \n    return (\n        <Image publicId={id}></Image>\n    )\n}\n\nexport default Picture;","import React, { useState } from \"react\";\nimport Picture from '../Components/Picture';\nimport { CloudinaryContext} from 'cloudinary-react'\nimport {withUser} from \"../User\";\n\nconst ImageForm = ({folder, multiple, callback}) => {\n  const [uploading, setUploading] = useState(false);\n  const [images, setImages] = useState([]);\n\n  const getImagesFromUser = e => {\n    e.preventDefault();\n    const {\n      target: { files },\n    } = e;\n    if(multiple){\n      setImages(currentImages=>[...currentImages, ...files]);\n      return;\n    }\n    setImages([...files]);\n  };\n\n  const uploadImages = async e => {\n    e.preventDefault();\n    console.log(images);\n    \n    const form = new FormData();\n    \n    setUploading(true);\n\n    const imageURLs = images.map(async image=>{\n      form.append('file', image);\n      form.append('upload_preset', `${folder}_images`);\n      \n      return await fetch(`https://api.cloudinary.com/v1_1/dpjlvg7ql/image/upload`, {\n        method:\"POST\",\n        body:form\n      }).then(res=>res.json())\n      .then(file=>{\n        const id = file.public_id\n        console.log(id);\n        return id;\n      })\n    })\n    const awaitURLs = await Promise.all(imageURLs)\n    callback(awaitURLs)\n    \n    setUploading(false);\n  };\n\n  const closeForm = e => {\n    e.preventDefault();\n    setImages([]);\n  };\n\n  \n\n  const DisplaySelectedImages = ({images, setImages}) =>{\n    const removeImage = e =>{\n      e.persist();\n      const index = Number(e.target.id);\n      console.log(\"Image name: \" + index);\n      const {name} = images[index];\n      setImages(images.filter(image=>image.name !== name))\n  }\n  \n    return <div className=\"tile is-ancestor\">\n        <div className=\"tile is-parent image-row\">\n            {images && images.map((image, index)=>(\n                <div className=\"tile is-child image-item\" key={index}>\n                  <span className=\"is-small button is-inverted is-danger delete-image\" title=\"Remove\" id={index} onClick={removeImage}>\n                    <i className=\"far fa-trash-alt\"/>\n                  </span>\n                  <img src={URL.createObjectURL(image)} alt=\"Could not load\"/>\n                </div>\n            ))}\n        </div>\n    </div>\n}\n\n  return (\n    <form onSubmit={uploadImages} className=\"form-container\">\n      <div className=\"file is-centered is-boxed has-name\">\n        <label className=\"file-label\">\n          <input className=\"file-input\" multiple={multiple} type=\"file\" name=\"images\" onChange={getImagesFromUser}/>\n          <span className=\"file-cta\">\n            <span className=\"file-icon\">\n              <i className=\"fas fa-images\"/>\n            </span>\n            <span className=\"file-label\">\n              Get images\n            </span>\n          </span>\n        </label>\n      </div>\n      <div className=\"buttons is-centered section\">\n        <button type=\"submit\" className=\"button is-success\">\n          Upload\n        </button>\n        <button type=\"submit\" className=\"button is-danger\" onClick={closeForm}>\n          Remove all\n        </button>\n      </div>\n      {uploading ? <div>Loading...</div> : <DisplaySelectedImages images={images} setImages={setImages}/>}\n    </form>\n  );\n};\n\nconst ImageProfileForm = withUser(({user, setImage, image})=>{\n\n  const getImagesFromUser = e => {\n    e.preventDefault();\n    const {\n      target: { files },\n    } = e;\n    console.dir(files[0])\n    setImage(files[0]);\n  };\n\n  const DisplaySelectedImages = ({images, setImages}) =>{\n    const removeImage = e =>{\n      setImage(null)\n  }\n  \n    return  (\n    <div className=\"tile is-child image-item\">\n      <span className=\"is-small button is-inverted is-danger delete-image\" title=\"Remove\" onClick={removeImage}>\n        <i className=\"far fa-trash-alt\"/>\n      </span>\n      <img src={URL.createObjectURL(image)} alt=\"Could not load\"/>\n    </div>\n    )\n    \n}\n\n  return (\n    \n      <div>\n          <div className=\"file is-centered is-boxed has-name\">\n            <label className=\"file-label\">\n              <input className=\"file-input\" src={\"./LocalsOnly.png\"} type=\"file\" name=\"images\" onChange={getImagesFromUser}/>\n              <span className=\"image is-128x128\">\n              { \n                user.avatar === null ? <img src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"User\"/>:\n                    <CloudinaryContext cloudName={\"dpjlvg7ql\"} secure={false} upload_preset=\"avatar_images\">\n                        <Picture id={user.avatar} preset=\"avatar_images\"/>\n                    </CloudinaryContext>\n              }\n              </span>\n            </label>\n          </div>\n          {image && <DisplaySelectedImages/>}\n      </div>\n      \n   \n  );\n})\n\nexport default ImageForm;\n\nexport {\n  ImageProfileForm\n}","import React, {useState} from \"react\";\nimport queryString from 'query-string';\nimport ImageForm from \"../Components/ImageForm\";\nimport axios from \"axios\";\nimport { withUser } from '../User'\nimport {compose} from 'recompose';\n\nconst ImageUpload = ({user, location : {search}})=>{\n  const [localID] = useState(queryString.parse(search).id);\n  const [name] = useState(queryString.parse(search).name);\n  \n  const uploadURLs = async (imageIDs)=>{\n    console.dir(imageIDs)\n    await axios.post(`/api/v1/images/locals/${localID}/users/${user.ownerID}`,{\n      images:imageIDs\n    }).then(res=>{\n      console.log(res.status);\n    }).catch(err=>{\n\n    })\n  }\n\n  return <main id=\"image-upload-page\" className=\"section content\">\n    <section className=\"box section container\">\n      <p className=\"title\">\n        Upload Images: {name}\n      </p>\n      <ImageForm folder={\"local\"} multiple={true} callback={uploadURLs}/>\n    </section>\n  </main>\n}\n\nexport default compose(withUser)(ImageUpload);"],"sourceRoot":""}