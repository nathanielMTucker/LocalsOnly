{"version":3,"sources":["Components/Picture.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Components/Avatar.jsx","Components/ImageForm.jsx","Pages/ImageUpload.jsx"],"names":["Picture","id","publicId","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Avatar","avatar","DefaultAvatar","viewBox","fill","xmlns","clipPath","width","height","rx","Math","floor","random","cx","cy","r","d","className","cloudName","secure","upload_preset","preset","ImageProfileForm","withUser","user","setImage","image","DisplaySelectedImages","images","setImages","title","onClick","e","src","URL","createObjectURL","alt","type","name","onChange","preventDefault","files","target","console","dir","getAvatar","ImageForm","folder","multiple","callback","useState","uploading","setUploading","uploadImages","a","log","form","FormData","imageURLs","map","append","fetch","method","body","then","res","json","file","public_id","Promise","all","awaitURLs","removeImage","persist","index","Number","filter","onSubmit","currentImages","ImageUpload","search","location","queryString","parse","localID","uploadURLs","imageIDs","axios","post","getID","status","catch","err"],"mappings":"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","file":"static/js/9.61f03a40.chunk.js","sourcesContent":["import React from 'react'\nimport {Image} from 'cloudinary-react';\n\nconst Picture = ({id}) => {\n    \n    return (\n        <Image publicId={id}></Image>\n    )\n}\n\nexport default Picture;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useEffect} from \"react\";\nimport Picture from \"./Picture\";\nimport { CloudinaryContext } from \"cloudinary-react\";\n\nconst Avatar = ({avatar}) =>{\n\n  // useEffect(()=>{\n  //   if(!avatar){\n  //     const da = document.getElementById(\"avatar-background\")\n  //   const rand = Math.round(Math.random(16) * 20) \n  //   let color = `hsl(${rand}, 100%, 75%)`;\n  //   da.style.fill = color;\n  //   }\n  // },[avatar])\n\n  const DefaultAvatar = ()=>(\n    <svg viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g id=\"default-avatar\" clipPath=\"url(#clip0)\">\n        <g id=\"background\">\n          <rect id=\"avatar-background\" width=\"500\" height=\"500\" rx=\"36\" fill={`hsl(${Math.floor(Math.random() * 18) * 20 }, 100%, 75%)`}/>\n        </g>\n        <g id=\"person\">\n          <circle id=\"avatar-head\" cx=\"250\" cy=\"167\" r=\"115\" fill=\"white\"/>\n          <path id=\"avatar-body\" d=\"M475 445C475 414.5 451.295 385.249 409.099 363.683C366.903 342.116 309.674 330 250 330C190.326 330 133.097 342.116 90.901 363.683C48.7053 385.249 25 414.5 25 445L250 445H475Z\" fill=\"white\"/>\n        </g>\n      </g>\n      <defs>\n        <clipPath id=\"clip0\">\n          <rect width=\"500\" height=\"500\" fill=\"white\"/>\n        </clipPath>\n      </defs>\n    </svg>\n  )\n\n  return (\n    <div className=\"avatar\">\n      {\n        avatar ? (\n          <CloudinaryContext cloudName={\"dpjlvg7ql\"} secure={false} upload_preset=\"avatar_images\">\n                <Picture id={avatar} preset=\"avatar_images\"/>\n            </CloudinaryContext>\n            ):\n            <DefaultAvatar/>\n      }\n    </div>\n    \n  )\n\n}\n\nexport default Avatar;","import React, { useState } from \"react\";\nimport {withUser} from \"../User\";\nimport Avatar from '../Components/Avatar';\n\nconst ImageForm = ({folder, multiple, callback}) => {\n  const [uploading, setUploading] = useState(false);\n  const [images, setImages] = useState([]);\n\n  const getImagesFromUser = e => {\n    e.preventDefault();\n    const {\n      target: { files },\n    } = e;\n    if(multiple){\n      setImages(currentImages=>[...currentImages, ...files]);\n      return;\n    }\n    setImages([...files]);\n  };\n\n  const uploadImages = async e => {\n    e.preventDefault();\n    console.log(images);\n    \n    const form = new FormData();\n    \n    setUploading(true);\n\n    const imageURLs = images.map(async image=>{\n      form.append('file', image);\n      form.append('upload_preset', `${folder}_images`);\n      \n      return await fetch(`https://api.cloudinary.com/v1_1/dpjlvg7ql/image/upload`, {\n        method:\"POST\",\n        body:form\n      }).then(res=>res.json())\n      .then(file=>{\n        const id = file.public_id\n        console.log(id);\n        return id;\n      })\n    })\n    const awaitURLs = await Promise.all(imageURLs)\n    callback(awaitURLs)\n    \n    setUploading(false);\n  };\n\n  const closeForm = e => {\n    e.preventDefault();\n    setImages([]);\n  };\n\n  \n\n  const DisplaySelectedImages = ({images, setImages}) =>{\n    const removeImage = e =>{\n      e.persist();\n      const index = Number(e.target.id);\n      console.log(\"Image name: \" + index);\n      const {name} = images[index];\n      setImages(images.filter(image=>image.name !== name))\n  }\n  \n    return <div className=\"tile is-ancestor\">\n        <div className=\"tile is-parent image-row\">\n            {images && images.map((image, index)=>(\n                <div className=\"tile is-child image-item\" key={index}>\n                  <span className=\"is-small button is-inverted is-danger delete-image\" title=\"Remove\" id={index} onClick={removeImage}>\n                    <i className=\"far fa-trash-alt\"/>\n                  </span>\n                  <img src={URL.createObjectURL(image)} alt=\"Could not load\"/>\n                </div>\n            ))}\n        </div>\n    </div>\n}\n\n  return (\n    <form onSubmit={uploadImages} className=\"form-container\">\n      <div className=\"file is-centered is-boxed has-name\">\n        <label className=\"file-label\">\n          <input className=\"file-input\" multiple={multiple} type=\"file\" name=\"images\" onChange={getImagesFromUser}/>\n          <span className=\"file-cta\">\n            <span className=\"file-icon\">\n              <i className=\"fas fa-images\"/>\n            </span>\n            <span className=\"file-label\">\n              Get images\n            </span>\n          </span>\n        </label>\n      </div>\n      <div className=\"buttons is-centered section\">\n        <button type=\"submit\" className=\"button is-success\">\n          Upload\n        </button>\n        <button type=\"submit\" className=\"button is-danger\" onClick={closeForm}>\n          Remove all\n        </button>\n      </div>\n      {uploading ? <div>Loading...</div> : <DisplaySelectedImages images={images} setImages={setImages}/>}\n    </form>\n  );\n};\n\nconst ImageProfileForm = withUser(({user, setImage, image})=>{\n\n  const getImagesFromUser = e => {\n    e.preventDefault();\n    const {\n      target: { files },\n    } = e;\n    console.dir(files[0])\n    setImage(files[0]);\n  };\n\n  const DisplaySelectedImages = ({images, setImages}) =>{\n    const removeImage = e =>{\n      setImage(null)\n  }\n  \n    return  (\n    <div className=\"tile is-child image-item\">\n      <span className=\"is-small button is-inverted is-danger delete-image\" title=\"Remove\" onClick={removeImage}>\n        <i className=\"far fa-trash-alt\"/>\n      </span>\n      <img src={URL.createObjectURL(image)} alt=\"Could not load\"/>\n    </div>\n    )\n    \n}\n\n  return (\n    \n      <div>\n          <div className=\"file is-centered is-boxed has-name\">\n            <label className=\"file-label\">\n              <input className=\"file-input\" src={\"./LocalsOnly.png\"} type=\"file\" name=\"images\" onChange={getImagesFromUser}/>\n              {/* <span className=\"image is-128x128\"> */}\n              \n                <Avatar avatar={user.getAvatar()}/>\n              \n              {/* </span> */}\n            </label>\n          </div>\n          {image && <DisplaySelectedImages/>}\n      </div>\n      \n   \n  );\n})\n\nexport default ImageForm;\n\nexport {\n  ImageProfileForm\n}","import React from \"react\";\nimport queryString from 'query-string';\nimport ImageForm from \"../Components/ImageForm\";\nimport axios from \"axios\";\nimport { withUser } from '../User'\n\nconst ImageUpload = withUser(({user, location : {search}})=>{\n\n  const {id:localID, name} = queryString.parse(search);\n  \n  const uploadURLs = async (imageIDs)=>{\n    console.dir(imageIDs)\n    await axios.post(`/api/v1/images/locals/${localID}/users/${user.getID()}`,{\n      images:imageIDs\n    }).then(res=>{\n      console.log(res.status);\n    }).catch(err=>{\n\n    })\n  }\n\n  return <main id=\"image-upload-page\" className=\"section content\">\n    <section className=\"box section container\">\n      <p className=\"title\">\n        Upload Images: {name}\n      </p>\n      <ImageForm folder={\"local\"} multiple={true} callback={uploadURLs}/>\n    </section>\n  </main>\n})\n\nexport default ImageUpload;"],"sourceRoot":""}