{"ast":null,"code":"var util = require('util');\n\nvar AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\n\n\nvar VirtualEarthGeocoder = function VirtualEarthGeocoder(httpAdapter, options) {\n  VirtualEarthGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n    throw new Error('You must specify an apiKey');\n  }\n};\n\nutil.inherits(VirtualEarthGeocoder, AbstractGeocoder); // TomTom geocoding API endpoint\n\nVirtualEarthGeocoder.prototype._endpoint = 'https://dev.virtualearth.net/REST/v1/Locations';\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\n\nVirtualEarthGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = {\n    q: value,\n    key: this.options.apiKey\n  };\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for (var i = 0; i < result.resourceSets[0].resources.length; i++) {\n        results.push(_this._formatResult(result.resourceSets[0].resources[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n/**\n* Reverse geocoding\n* @param {lat:<number>, lon:<number>}  lat: Latitude, lon: Longitude\n* @param <function> callback Callback method\n*/\n\n\nVirtualEarthGeocoder.prototype._reverse = function (value, callback) {\n  var _this = this;\n\n  var params = {\n    key: this.options.apiKey\n  };\n  var endpoint = this._endpoint + '/' + value.lat + ',' + value.lon;\n  this.httpAdapter.get(endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for (var i = 0; i < result.resourceSets[0].resources.length; i++) {\n        results.push(_this._formatResult(result.resourceSets[0].resources[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nVirtualEarthGeocoder.prototype._formatResult = function (result) {\n  return {\n    'latitude': result.point.coordinates[0],\n    'longitude': result.point.coordinates[1],\n    'country': result.address.countryRegion,\n    'city': result.address.locality,\n    'state': result.address.adminDistrict,\n    'zipcode': result.address.postalCode,\n    'streetName': result.address.addressLine,\n    'formattedAddress': result.address.formattedAddress\n  };\n};\n\nmodule.exports = VirtualEarthGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/virtualearth.js"],"names":["util","require","AbstractGeocoder","VirtualEarthGeocoder","httpAdapter","options","super_","call","apiKey","Error","inherits","prototype","_endpoint","_geocode","value","callback","_this","params","q","key","get","err","result","results","i","resourceSets","resources","length","push","_formatResult","raw","_reverse","endpoint","lat","lon","point","coordinates","address","countryRegion","locality","adminDistrict","postalCode","addressLine","formattedAddress","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;AAKA,IAAIE,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,WAA9B,EAA2CC,OAA3C,EAAoD;AAE7EF,EAAAA,oBAAoB,CAACG,MAArB,CAA4BC,IAA5B,CAAiC,IAAjC,EAAuCH,WAAvC,EAAoDC,OAApD;;AAEA,MAAI,CAAC,KAAKA,OAAL,CAAaG,MAAd,IAAwB,KAAKH,OAAL,CAAaG,MAAb,IAAuB,WAAnD,EAAgE;AAC9D,UAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,CAPD;;AASAT,IAAI,CAACU,QAAL,CAAcP,oBAAd,EAAoCD,gBAApC,E,CAEA;;AACAC,oBAAoB,CAACQ,SAArB,CAA+BC,SAA/B,GAA2C,gDAA3C;AAEA;;;;;;AAKAT,oBAAoB,CAACQ,SAArB,CAA+BE,QAA/B,GAA0C,UAASC,KAAT,EAAgBC,QAAhB,EAA0B;AAElE,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIC,MAAM,GAAG;AACXC,IAAAA,CAAC,EAAGJ,KADO;AAEXK,IAAAA,GAAG,EAAK,KAAKd,OAAL,CAAaG;AAFV,GAAb;AAKA,OAAKJ,WAAL,CAAiBgB,GAAjB,CAAqB,KAAKR,SAA1B,EAAqCK,MAArC,EAA6C,UAASI,GAAT,EAAcC,MAAd,EAAsB;AACjE,QAAID,GAAJ,EAAS;AACP,aAAON,QAAQ,CAACM,GAAD,CAAf;AACD,KAFD,MAEO;AACL,UAAIE,OAAO,GAAG,EAAd;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACG,YAAP,CAAoB,CAApB,EAAuBC,SAAvB,CAAiCC,MAApD,EAA4DH,CAAC,EAA7D,EAAiE;AAC7DD,QAAAA,OAAO,CAACK,IAAR,CAAaZ,KAAK,CAACa,aAAN,CAAoBP,MAAM,CAACG,YAAP,CAAoB,CAApB,EAAuBC,SAAvB,CAAiCF,CAAjC,CAApB,CAAb;AACH;;AAEDD,MAAAA,OAAO,CAACO,GAAR,GAAcR,MAAd;AACAP,MAAAA,QAAQ,CAAC,KAAD,EAAQQ,OAAR,CAAR;AACD;AACF,GAbD;AAcD,CAvBD;AAyBA;;;;;;;AAKApB,oBAAoB,CAACQ,SAArB,CAA+BoB,QAA/B,GAA0C,UAASjB,KAAT,EAAgBC,QAAhB,EAA0B;AAElE,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIC,MAAM,GAAG;AACXE,IAAAA,GAAG,EAAE,KAAKd,OAAL,CAAaG;AADP,GAAb;AAIA,MAAIwB,QAAQ,GAAG,KAAKpB,SAAL,GAAiB,GAAjB,GAAuBE,KAAK,CAACmB,GAA7B,GAAmC,GAAnC,GAAyCnB,KAAK,CAACoB,GAA9D;AAEA,OAAK9B,WAAL,CAAiBgB,GAAjB,CAAqBY,QAArB,EAA+Bf,MAA/B,EAAuC,UAASI,GAAT,EAAcC,MAAd,EAAsB;AAC3D,QAAID,GAAJ,EAAS;AACP,aAAON,QAAQ,CAACM,GAAD,CAAf;AACD,KAFD,MAEO;AACL,UAAIE,OAAO,GAAG,EAAd;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACG,YAAP,CAAoB,CAApB,EAAuBC,SAAvB,CAAiCC,MAApD,EAA4DH,CAAC,EAA7D,EAAiE;AAC7DD,QAAAA,OAAO,CAACK,IAAR,CAAaZ,KAAK,CAACa,aAAN,CAAoBP,MAAM,CAACG,YAAP,CAAoB,CAApB,EAAuBC,SAAvB,CAAiCF,CAAjC,CAApB,CAAb;AACH;;AAEDD,MAAAA,OAAO,CAACO,GAAR,GAAcR,MAAd;AACAP,MAAAA,QAAQ,CAAC,KAAD,EAAQQ,OAAR,CAAR;AACD;AACF,GAbD;AAcD,CAxBD;;AA0BApB,oBAAoB,CAACQ,SAArB,CAA+BkB,aAA/B,GAA+C,UAASP,MAAT,EAAiB;AAC9D,SAAO;AACL,gBAAaA,MAAM,CAACa,KAAP,CAAaC,WAAb,CAAyB,CAAzB,CADR;AAEL,iBAAcd,MAAM,CAACa,KAAP,CAAaC,WAAb,CAAyB,CAAzB,CAFT;AAGL,eAAYd,MAAM,CAACe,OAAP,CAAeC,aAHtB;AAIL,YAAShB,MAAM,CAACe,OAAP,CAAeE,QAJnB;AAKL,aAAUjB,MAAM,CAACe,OAAP,CAAeG,aALpB;AAML,eAAYlB,MAAM,CAACe,OAAP,CAAeI,UANtB;AAOL,kBAAcnB,MAAM,CAACe,OAAP,CAAeK,WAPxB;AAQL,wBAAoBpB,MAAM,CAACe,OAAP,CAAeM;AAR9B,GAAP;AAUD,CAXD;;AAaAC,MAAM,CAACC,OAAP,GAAiB1C,oBAAjB","sourcesContent":["var util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\nvar VirtualEarthGeocoder = function VirtualEarthGeocoder(httpAdapter, options) {\n\n  VirtualEarthGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n    throw new Error('You must specify an apiKey');\n  }\n};\n\nutil.inherits(VirtualEarthGeocoder, AbstractGeocoder);\n\n// TomTom geocoding API endpoint\nVirtualEarthGeocoder.prototype._endpoint = 'https://dev.virtualearth.net/REST/v1/Locations';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\nVirtualEarthGeocoder.prototype._geocode = function(value, callback) {\n\n  var _this = this;\n\n  var params = {\n    q : value,\n    key   : this.options.apiKey\n  };\n\n  this.httpAdapter.get(this._endpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for(var i = 0; i < result.resourceSets[0].resources.length; i++) {\n          results.push(_this._formatResult(result.resourceSets[0].resources[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>, lon:<number>}  lat: Latitude, lon: Longitude\n* @param <function> callback Callback method\n*/\nVirtualEarthGeocoder.prototype._reverse = function(value, callback) {\n\n  var _this = this;\n\n  var params = {\n    key: this.options.apiKey\n  };\n\n  var endpoint = this._endpoint + '/' + value.lat + ',' + value.lon;\n\n  this.httpAdapter.get(endpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for(var i = 0; i < result.resourceSets[0].resources.length; i++) {\n          results.push(_this._formatResult(result.resourceSets[0].resources[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n}\n\nVirtualEarthGeocoder.prototype._formatResult = function(result) {\n  return {\n    'latitude' : result.point.coordinates[0],\n    'longitude' : result.point.coordinates[1],\n    'country' : result.address.countryRegion,\n    'city' : result.address.locality,\n    'state' : result.address.adminDistrict,\n    'zipcode' : result.address.postalCode,\n    'streetName': result.address.addressLine,\n    'formattedAddress': result.address.formattedAddress\n  };\n};\n\nmodule.exports = VirtualEarthGeocoder;\n"]},"metadata":{},"sourceType":"script"}