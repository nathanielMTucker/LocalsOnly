{"ast":null,"code":"var util = require('util');\n\nvar AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar TeleportGeocoder = function TeleportGeocoder(httpAdapter, options) {\n  TeleportGeocoder.super_.call(this, httpAdapter, options);\n  var base = 'https://api.teleport.org/api';\n  this._cities_endpoint = base + '/cities/';\n  this._locations_endpoint = base + '/locations/';\n};\n\nutil.inherits(TeleportGeocoder, AbstractGeocoder);\n\nfunction getEmbeddedPath(parent, path) {\n  var elements = path.split('/');\n\n  for (var i in elements) {\n    var element = elements[i];\n    var embedded = parent._embedded;\n\n    if (!embedded) {\n      return undefined;\n    }\n\n    var child = embedded[element];\n\n    if (!child) {\n      return undefined;\n    }\n\n    parent = child;\n  }\n\n  return parent;\n}\n/**\n * Geocode\n *\n * @param <string>    value     Value to geocode (Address)\n * @param <function>  callback  Callback method\n */\n\n\nTeleportGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = {};\n  params.search = value;\n  params.embed = 'city:search-results/city:item/{city:country,city:admin1_division,city:urban_area}';\n  this.httpAdapter.get(this._cities_endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      if (result) {\n        var searchResults = getEmbeddedPath(result, 'city:search-results') || [];\n\n        for (var i in searchResults) {\n          var confidence = (25 - i) / 25.0 * 10;\n          results.push(_this._formatResult(searchResults[i], 'city:item', confidence));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTeleportGeocoder.prototype._formatResult = function (result, cityRelationName, confidence) {\n  var city = getEmbeddedPath(result, cityRelationName);\n  var admin1 = getEmbeddedPath(city, 'city:admin1_division') || {};\n  var country = getEmbeddedPath(city, 'city:country') || {};\n  var urban_area = getEmbeddedPath(city, 'city:urban_area') || {};\n  var urban_area_links = urban_area._links || {};\n  var extra = {\n    confidence: confidence,\n    urban_area: urban_area.name,\n    urban_area_api_url: (urban_area_links.self || {}).href,\n    urban_area_web_url: urban_area.teleport_city_url\n  };\n\n  if (result.distance_km) {\n    extra.distance_km = result.distance_km;\n  }\n\n  if (result.matching_full_name) {\n    extra.matching_full_name = result.matching_full_name;\n  }\n\n  return {\n    'latitude': city.location.latlon.latitude,\n    'longitude': city.location.latlon.longitude,\n    'city': city.name,\n    'country': country.name,\n    'countryCode': country.iso_alpha2,\n    'state': admin1.name,\n    'stateCode': admin1.geonames_admin1_code,\n    'extra': extra\n  };\n};\n/**\n * Reverse geocoding\n *\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback          Callback method\n */\n\n\nTeleportGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n  var suffix = lat + ',' + lng;\n\n  var _this = this;\n\n  var params = {};\n  params.embed = 'location:nearest-cities/location:nearest-city/{city:country,city:admin1_division,city:urban_area}';\n  this.httpAdapter.get(this._locations_endpoint + suffix, params, function (err, result) {\n    if (err) {\n      throw err;\n    } else {\n      var results = [];\n\n      if (result) {\n        var searchResults = getEmbeddedPath(result, 'location:nearest-cities') || [];\n\n        for (var i in searchResults) {\n          var searchResult = searchResults[i];\n          var confidence = Math.max(0, 25 - searchResult.distance_km) / 25 * 10;\n          results.push(_this._formatResult(searchResult, 'location:nearest-city', confidence));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = TeleportGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/teleportgeocoder.js"],"names":["util","require","AbstractGeocoder","TeleportGeocoder","httpAdapter","options","super_","call","base","_cities_endpoint","_locations_endpoint","inherits","getEmbeddedPath","parent","path","elements","split","i","element","embedded","_embedded","undefined","child","prototype","_geocode","value","callback","_this","params","search","embed","get","err","result","results","searchResults","confidence","push","_formatResult","raw","cityRelationName","city","admin1","country","urban_area","urban_area_links","_links","extra","name","urban_area_api_url","self","href","urban_area_web_url","teleport_city_url","distance_km","matching_full_name","location","latlon","latitude","longitude","iso_alpha2","geonames_admin1_code","_reverse","query","lat","lng","lon","suffix","searchResult","Math","max","module","exports"],"mappings":"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","sourcesContent":["var util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar TeleportGeocoder = function TeleportGeocoder(httpAdapter, options) {\n  TeleportGeocoder.super_.call(this, httpAdapter, options);\n\n  var base = 'https://api.teleport.org/api';\n  this._cities_endpoint = base + '/cities/';\n  this._locations_endpoint = base + '/locations/';\n};\n\nutil.inherits(TeleportGeocoder, AbstractGeocoder);\n\nfunction getEmbeddedPath(parent, path) {\n  var elements = path.split('/');\n  for ( var i in elements) {\n    var element = elements[i];\n    var embedded = parent._embedded;\n    if (!embedded) {\n      return undefined;\n    }\n    var child = embedded[element];\n    if (!child) {\n      return undefined;\n    }\n    parent = child;\n  }\n  return parent;\n}\n\n/**\n * Geocode\n *\n * @param <string>    value     Value to geocode (Address)\n * @param <function>  callback  Callback method\n */\nTeleportGeocoder.prototype._geocode = function(value, callback) {\n  var _this = this;\n\n  var params = {};\n  params.search = value;\n  params.embed = 'city:search-results/city:item/{city:country,city:admin1_division,city:urban_area}';\n\n  this.httpAdapter.get(this._cities_endpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      if (result) {\n        var searchResults = getEmbeddedPath(result, 'city:search-results') || [];\n        for (var i in searchResults) {\n          var confidence = (25 - i) / 25.0 * 10;\n          results.push(_this._formatResult(searchResults[i], 'city:item', confidence));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTeleportGeocoder.prototype._formatResult = function(result, cityRelationName, confidence) {\n  var city = getEmbeddedPath(result, cityRelationName);\n  var admin1 = getEmbeddedPath(city, 'city:admin1_division') || {};\n  var country = getEmbeddedPath(city, 'city:country') || {};\n  var urban_area = getEmbeddedPath(city, 'city:urban_area') || {};\n  var urban_area_links = urban_area._links || {};\n  var extra = {\n    confidence: confidence,\n    urban_area: urban_area.name,\n    urban_area_api_url: (urban_area_links.self || {}).href,\n    urban_area_web_url: urban_area.teleport_city_url\n  };\n  if (result.distance_km) {\n    extra.distance_km = result.distance_km;\n  }\n  if (result.matching_full_name) {\n    extra.matching_full_name = result.matching_full_name;\n  }\n\n  return {\n    'latitude': city.location.latlon.latitude,\n    'longitude': city.location.latlon.longitude,\n    'city': city.name,\n    'country': country.name,\n    'countryCode': country.iso_alpha2,\n    'state': admin1.name,\n    'stateCode': admin1.geonames_admin1_code,\n    'extra': extra\n  };\n};\n\n/**\n * Reverse geocoding\n *\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback          Callback method\n */\nTeleportGeocoder.prototype._reverse = function(query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n  var suffix = lat + ',' + lng;\n\n  var _this = this;\n\n  var params = {};\n  params.embed = 'location:nearest-cities/location:nearest-city/{city:country,city:admin1_division,city:urban_area}';\n\n  this.httpAdapter.get(this._locations_endpoint + suffix, params, function(err, result) {\n    if (err) {\n      throw err;\n    } else {\n      var results = [];\n\n      if (result) {\n        var searchResults = getEmbeddedPath(result, 'location:nearest-cities') || [];\n        for ( var i in searchResults) {\n          var searchResult = searchResults[i];\n          var confidence = Math.max(0, 25 - searchResult.distance_km) / 25 * 10;\n          results.push(_this._formatResult(searchResult, 'location:nearest-city', confidence));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = TeleportGeocoder;\n"]},"metadata":{},"sourceType":"script"}