{"ast":null,"code":"var querystring = require('querystring'),\n    util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n *\n * Geocoder for LocationIQ\n * http://locationiq.org/#docs\n *\n * @param {[type]} httpAdapter [description]\n * @param {String} apiKey      [description]\n */\n\n\nvar LocationIQGeocoder = function LocationIQGeocoder(httpAdapter, apiKey) {\n  LocationIQGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error('LocationIQGeocoder needs an apiKey');\n  }\n\n  this.apiKey = querystring.unescape(apiKey);\n};\n\nutil.inherits(LocationIQGeocoder, AbstractGeocoder);\nLocationIQGeocoder.prototype._endpoint = 'http://locationiq.org/v1';\nLocationIQGeocoder.prototype._endpoint_reverse = 'http://osm1.unwiredlabs.com/locationiq/v1/reverse.php';\n/**\n * Geocode\n * @param  {string|object}   value\n *   Value to geocode (Adress String or parameters as specified over at\n *   http://locationiq.org/#docs)\n * @param  {Function} callback callback method\n */\n\nLocationIQGeocoder.prototype._geocode = function (value, callback) {\n  var params = this._getCommonParams();\n\n  if (typeof value === 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n\n      switch (k) {\n        default:\n          params[k] = v;\n          break;\n        // alias for postalcode\n\n        case 'zipcode':\n          params.postalcode = v;\n          break;\n        // alias for street\n\n        case 'address':\n          params.street = v;\n          break;\n      }\n    }\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint + '/search.php', params, function (err, responseData) {\n    if (err) {\n      return callback(err);\n    } // when there’s no err thrown here the resulting array object always\n    // seemes to be defined but empty so no need to check for\n    // responseData.error for now\n    // add check if the array is not empty, as it returns an empty array from time to time\n\n\n    var results = [];\n\n    if (responseData.length && responseData.length > 0) {\n      results = responseData.map(this._formatResult).filter(function (result) {\n        return result.longitude && result.latitude;\n      });\n      results.raw = responseData;\n    }\n\n    callback(false, results);\n  }.bind(this));\n};\n/**\n * Reverse geocoding\n * @param  {lat:<number>,lon<number>}   query    lat: Latitude, lon: Longitutde and additional parameters as specified here: http://locationiq.org/#docs\n * @param  {Function} callback Callback method\n */\n\n\nLocationIQGeocoder.prototype._reverse = function (query, callback) {\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params, function (err, responseData) {\n    if (err) {\n      return callback(err);\n    } // when there’s no err thrown here the resulting array object always\n    // seemes to be defined but empty so no need to check for\n    // responseData.error for now\n    // locationiq always seemes to answer with a single object instead\n    // of an array\n\n\n    var results = [responseData].map(this._formatResult).filter(function (result) {\n      return result.longitude && result.latitude;\n    });\n    results.raw = responseData;\n    callback(false, results);\n  }.bind(this));\n};\n\nLocationIQGeocoder.prototype._formatResult = function (result) {\n  // transform lat and lon to real floats\n  var transformedResult = {\n    'latitude': result.lat ? parseFloat(result.lat) : undefined,\n    'longitude': result.lon ? parseFloat(result.lon) : undefined\n  };\n\n  if (result.address) {\n    transformedResult.country = result.address.country;\n    transformedResult.country = result.address.country;\n    transformedResult.city = result.address.city || result.address.town || result.address.village || result.address.hamlet;\n    transformedResult.state = result.address.state;\n    transformedResult.zipcode = result.address.postcode;\n    transformedResult.streetName = result.address.road || result.address.cycleway;\n    transformedResult.streetNumber = result.address.house_number; // make sure countrycode is always uppercase to keep node-geocoder api formats\n\n    var countryCode = result.address.country_code;\n\n    if (countryCode) {\n      countryCode = countryCode.toUpperCase();\n    }\n\n    transformedResult.countryCode = countryCode;\n  }\n\n  return transformedResult;\n};\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\n\n\nLocationIQGeocoder.prototype._getCommonParams = function () {\n  return {\n    'key': this.apiKey\n  };\n};\n/**\n * Adds parameters that are enforced\n *\n * @param  {object} params object containing the parameters\n */\n\n\nLocationIQGeocoder.prototype._forceParams = function (params) {\n  params.format = 'json';\n  params.addressdetails = '1';\n};\n\nmodule.exports = LocationIQGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js"],"names":["querystring","require","util","AbstractGeocoder","LocationIQGeocoder","httpAdapter","apiKey","super_","call","Error","unescape","inherits","prototype","_endpoint","_endpoint_reverse","_geocode","value","callback","params","_getCommonParams","q","k","v","postalcode","street","_forceParams","get","err","responseData","results","length","map","_formatResult","filter","result","longitude","latitude","raw","bind","_reverse","query","transformedResult","lat","parseFloat","undefined","lon","address","country","city","town","village","hamlet","state","zipcode","postcode","streetName","road","cycleway","streetNumber","house_number","countryCode","country_code","toUpperCase","format","addressdetails","module","exports"],"mappings":"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","sourcesContent":["var\n  querystring      = require('querystring'),\n  util             = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n *\n * Geocoder for LocationIQ\n * http://locationiq.org/#docs\n *\n * @param {[type]} httpAdapter [description]\n * @param {String} apiKey      [description]\n */\nvar LocationIQGeocoder = function LocationIQGeocoder(httpAdapter, apiKey) {\n\n  LocationIQGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error('LocationIQGeocoder needs an apiKey');\n  }\n\n  this.apiKey = querystring.unescape(apiKey);\n};\n\nutil.inherits(LocationIQGeocoder, AbstractGeocoder);\n\nLocationIQGeocoder.prototype._endpoint = 'http://locationiq.org/v1';\nLocationIQGeocoder.prototype._endpoint_reverse = 'http://osm1.unwiredlabs.com/locationiq/v1/reverse.php';\n\n/**\n * Geocode\n * @param  {string|object}   value\n *   Value to geocode (Adress String or parameters as specified over at\n *   http://locationiq.org/#docs)\n * @param  {Function} callback callback method\n */\nLocationIQGeocoder.prototype._geocode = function(value, callback) {\n  var params = this._getCommonParams();\n\n  if (typeof value === 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n      switch(k) {\n        default:\n          params[k] = v;\n          break;\n        // alias for postalcode\n        case 'zipcode':\n          params.postalcode = v;\n          break;\n        // alias for street\n        case 'address':\n          params.street = v;\n          break;\n      }\n    }\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint + '/search.php', params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n      // add check if the array is not empty, as it returns an empty array from time to time\n      var results = [];\n      if (responseData.length && responseData.length > 0) {\n        results = responseData.map(this._formatResult).filter(function(result) {\n          return result.longitude && result.latitude;\n        });\n        results.raw = responseData;\n      }\n\n      callback(false, results);\n    }.bind(this));\n};\n\n/**\n * Reverse geocoding\n * @param  {lat:<number>,lon<number>}   query    lat: Latitude, lon: Longitutde and additional parameters as specified here: http://locationiq.org/#docs\n * @param  {Function} callback Callback method\n */\nLocationIQGeocoder.prototype._reverse = function(query, callback) {\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n\n      // locationiq always seemes to answer with a single object instead\n      // of an array\n      var results = [responseData].map(this._formatResult).filter(function(result) {\n        return result.longitude && result.latitude;\n      });\n      results.raw = responseData;\n\n      callback(false, results);\n    }.bind(this));\n};\n\nLocationIQGeocoder.prototype._formatResult = function(result) {\n  // transform lat and lon to real floats\n  var transformedResult = {\n    'latitude' : result.lat ? parseFloat(result.lat) : undefined,\n    'longitude' : result.lon ? parseFloat(result.lon) : undefined\n  };\n\n  if (result.address) {\n    transformedResult.country = result.address.country;\n    transformedResult.country = result.address.country;\n    transformedResult.city = result.address.city || result.address.town || result.address.village || result.address.hamlet;\n    transformedResult.state = result.address.state;\n    transformedResult.zipcode = result.address.postcode;\n    transformedResult.streetName = result.address.road || result.address.cycleway;\n    transformedResult.streetNumber = result.address.house_number;\n    \n    // make sure countrycode is always uppercase to keep node-geocoder api formats\n    var countryCode = result.address.country_code;\n    if (countryCode) {\n        countryCode = countryCode.toUpperCase();\n    }\n    \n    transformedResult.countryCode = countryCode;\n  }\n  return transformedResult;\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nLocationIQGeocoder.prototype._getCommonParams = function() {\n  return {\n    'key': this.apiKey\n  };\n};\n\n/**\n * Adds parameters that are enforced\n *\n * @param  {object} params object containing the parameters\n */\nLocationIQGeocoder.prototype._forceParams = function(params) {\n  params.format = 'json';\n  params.addressdetails = '1';\n};\n\n\nmodule.exports = LocationIQGeocoder;\n"]},"metadata":{},"sourceType":"script"}