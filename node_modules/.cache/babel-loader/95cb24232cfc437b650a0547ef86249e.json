{"ast":null,"code":"var querystring = require('querystring'),\n    util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar MapQuestGeocoder = function OpenMapQuestGeocoder(httpAdapter, apiKey) {\n  MapQuestGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'https://open.mapquestapi.com/geocoding/v1';\n};\n\nutil.inherits(MapQuestGeocoder, AbstractGeocoder);\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\n\nMapQuestGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/address', {\n    'location': value,\n    'key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.info.statuscode !== 0) {\n        return callback(new Error('Status is ' + result.info.statuscode + ' ' + result.info.messages[0]), {\n          raw: result\n        });\n      }\n\n      var results = [];\n      var locations = result.results[0].locations;\n\n      for (var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nMapQuestGeocoder.prototype._formatResult = function (result) {\n  var MQConfidenceLookup = {\n    POINT: 1,\n    ADDRESS: 0.9,\n    INTERSECTION: 0.8,\n    //less accurate than the MQ description\n    STREET: 0.7,\n    ZIP: 0.5,\n    ZIP_EXTENDED: 0.5,\n    NEIGHBORHOOD: 0.5,\n    CITY: 0.4,\n    COUNTY: 0.3,\n    STATE: 0.2,\n    COUNTRY: 0.1\n  };\n  return {\n    'latitude': result.latLng.lat,\n    'longitude': result.latLng.lng,\n    'country': null,\n    'countryCode': result.adminArea1,\n    'city': result.adminArea5,\n    'state': result.adminArea3,\n    'zipcode': result.postalCode,\n    'streetName': result.street,\n    'streetNumber': null,\n    'extra': {\n      confidence: MQConfidenceLookup[result.geocodeQuality] || 0\n    }\n  };\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nMapQuestGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse', {\n    'location': lat + ',' + lng,\n    'key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      var locations;\n\n      if (result.results === undefined || !result.results.length) {\n        return callback(new Error('Incorrect response'));\n      }\n\n      locations = result.results[0].locations;\n\n      for (var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = MapQuestGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/openmapquestgeocoder.js"],"names":["querystring","require","util","AbstractGeocoder","MapQuestGeocoder","OpenMapQuestGeocoder","httpAdapter","apiKey","super_","call","Error","constructor","name","_endpoint","inherits","prototype","_geocode","value","callback","_this","get","unescape","err","result","info","statuscode","messages","raw","results","locations","i","length","push","_formatResult","MQConfidenceLookup","POINT","ADDRESS","INTERSECTION","STREET","ZIP","ZIP_EXTENDED","NEIGHBORHOOD","CITY","COUNTY","STATE","COUNTRY","latLng","lat","lng","adminArea1","adminArea5","adminArea3","postalCode","street","confidence","geocodeQuality","_reverse","query","lon","undefined","module","exports"],"mappings":"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","sourcesContent":["var querystring = require('querystring'),\n  util = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar MapQuestGeocoder = function OpenMapQuestGeocoder(httpAdapter, apiKey) {\n\n  MapQuestGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'https://open.mapquestapi.com/geocoding/v1';\n};\n\nutil.inherits(MapQuestGeocoder, AbstractGeocoder);\n\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\nMapQuestGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n  this.httpAdapter.get(this._endpoint + '/address', {\n    'location': value,\n    'key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.info.statuscode !== 0) {\n        return callback(new Error('Status is ' + result.info.statuscode + ' ' + result.info.messages[0]), {raw: result});\n      }\n\n      var results = [];\n\n      var locations = result.results[0].locations;\n\n      for (var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nMapQuestGeocoder.prototype._formatResult = function (result) {\n  var MQConfidenceLookup = {\n    POINT: 1,\n    ADDRESS: 0.9,\n    INTERSECTION: 0.8, //less accurate than the MQ description\n    STREET: 0.7,\n    ZIP: 0.5,\n    ZIP_EXTENDED: 0.5,\n    NEIGHBORHOOD: 0.5,\n    CITY: 0.4,\n    COUNTY: 0.3,\n    STATE: 0.2,\n    COUNTRY: 0.1\n  };\n  return {\n    'latitude': result.latLng.lat,\n    'longitude': result.latLng.lng,\n    'country': null,\n    'countryCode': result.adminArea1,\n    'city': result.adminArea5,\n    'state': result.adminArea3,\n    'zipcode': result.postalCode,\n    'streetName': result.street,\n    'streetNumber': null,\n    'extra': {\n      confidence: MQConfidenceLookup[result.geocodeQuality] || 0\n    }\n\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nMapQuestGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse', {\n    'location': lat + ',' + lng,\n    'key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      var locations;\n\n      if (result.results === undefined || !result.results.length) {\n          return callback(new Error('Incorrect response'));\n      }\n\n      locations = result.results[0].locations;\n\n      for (var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = MapQuestGeocoder;\n"]},"metadata":{},"sourceType":"script"}