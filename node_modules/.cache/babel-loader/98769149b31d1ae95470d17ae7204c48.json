{"ast":null,"code":"var util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar OpendataFranceGeocoder = function OpendataFranceGeocoder(httpAdapter, options) {\n  this.options = ['language', 'email', 'apiKey'];\n  OpendataFranceGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(OpendataFranceGeocoder, AbstractGeocoder);\nOpendataFranceGeocoder.prototype._endpoint = 'https://api-adresse.data.gouv.fr/search';\nOpendataFranceGeocoder.prototype._endpoint_reverse = 'https://api-adresse.data.gouv.fr/reverse';\n/**\n* Geocode\n* @param <string|object>   value    Value to geocode (Address or parameters, as specified at https://opendatafrance/api/)\n* @param <function> callback Callback method\n*/\n\nOpendataFranceGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  if (typeof value == 'string') {\n    params.q = value;\n  } else {\n    if (value.address) {\n      params.q = value.address;\n    }\n\n    if (value.lat && value.lon) {\n      params.lat = value.lat;\n      params.lon = value.lon;\n    }\n\n    if (value.zipcode) {\n      params.postcode = value.zipcode;\n    }\n\n    if (value.type) {\n      params.type = value.type;\n    }\n\n    if (value.citycode) {\n      params.citycode = value.citycode;\n    }\n\n    if (value.limit) {\n      params.limit = value.limit;\n    }\n  }\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.error) {\n        return callback(new Error(result.error));\n      }\n\n      var results = [];\n\n      if (result.features) {\n        for (var i = 0; i < result.features.length; i++) {\n          results.push(_this._formatResult(result.features[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nOpendataFranceGeocoder.prototype._formatResult = function (result) {\n  var latitude = result.geometry.coordinates[1];\n\n  if (latitude) {\n    latitude = parseFloat(latitude);\n  }\n\n  var longitude = result.geometry.coordinates[0];\n\n  if (longitude) {\n    longitude = parseFloat(longitude);\n  }\n\n  var properties = result.properties;\n  var formatedResult = {\n    latitude: latitude,\n    longitude: longitude,\n    state: properties.context,\n    city: properties.city,\n    zipcode: properties.postcode,\n    citycode: properties.citycode,\n    countryCode: 'FR',\n    country: 'France',\n    type: properties.type,\n    id: properties.id\n  };\n\n  if (properties.type === 'housenumber') {\n    formatedResult.streetName = properties.street;\n    formatedResult.streetNumber = properties.housenumber;\n  } else if (properties.type === 'street') {\n    formatedResult.streetName = properties.name;\n  } else if (properties.type === 'city') {\n    formatedResult.population = properties.population;\n    formatedResult.adm_weight = properties.adm_weight;\n  } else if (properties.type === 'village') {\n    formatedResult.population = properties.population;\n  } else if (properties.type === 'locality') {\n    formatedResult.streetName = properties.name;\n  }\n\n  return formatedResult;\n};\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>, ...}  lat: Latitude, lon: Longitude, ... see https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* @param <function> callback Callback method\n*/\n\n\nOpendataFranceGeocoder.prototype._reverse = function (query, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n\n  this.httpAdapter.get(this._endpoint_reverse, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.error) {\n        return callback(new Error(result.error));\n      }\n\n      var results = [];\n\n      if (result.features) {\n        for (var i = 0; i < result.features.length; i++) {\n          results.push(_this._formatResult(result.features[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\n\n\nOpendataFranceGeocoder.prototype._getCommonParams = function () {\n  var params = {};\n\n  for (var k in this.options) {\n    var v = this.options[k];\n\n    if (!v) {\n      continue;\n    }\n\n    if (k === 'language') {\n      k = 'accept-language';\n    }\n\n    params[k] = v;\n  }\n\n  return params;\n};\n\nmodule.exports = OpendataFranceGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/opendatafrancegeocoder.js"],"names":["util","require","AbstractGeocoder","OpendataFranceGeocoder","httpAdapter","options","super_","call","inherits","prototype","_endpoint","_endpoint_reverse","_geocode","value","callback","_this","params","_getCommonParams","q","address","lat","lon","zipcode","postcode","type","citycode","limit","get","err","result","error","Error","results","features","i","length","push","_formatResult","raw","latitude","geometry","coordinates","parseFloat","longitude","properties","formatedResult","state","context","city","countryCode","country","id","streetName","street","streetNumber","housenumber","name","population","adm_weight","_reverse","query","k","v","module","exports"],"mappings":"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","sourcesContent":["var util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar OpendataFranceGeocoder = function OpendataFranceGeocoder(httpAdapter, options) {\n    this.options = ['language','email','apiKey'];\n\n    OpendataFranceGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(OpendataFranceGeocoder, AbstractGeocoder);\n\nOpendataFranceGeocoder.prototype._endpoint = 'https://api-adresse.data.gouv.fr/search';\n\nOpendataFranceGeocoder.prototype._endpoint_reverse = 'https://api-adresse.data.gouv.fr/reverse';\n\n/**\n* Geocode\n* @param <string|object>   value    Value to geocode (Address or parameters, as specified at https://opendatafrance/api/)\n* @param <function> callback Callback method\n*/\nOpendataFranceGeocoder.prototype._geocode = function(value, callback) {\n    var _this = this;\n\n    var params = this._getCommonParams();\n\n    if (typeof value == 'string') {\n      params.q = value;\n    } else {\n      if (value.address) {\n        params.q = value.address;\n      }\n      if (value.lat && value.lon) {\n        params.lat = value.lat;\n        params.lon = value.lon;\n      }\n      if (value.zipcode) {\n        params.postcode = value.zipcode;\n      }\n      if (value.type) {\n        params.type = value.type;\n      }\n      if (value.citycode) {\n        params.citycode = value.citycode;\n      }\n      if (value.limit) {\n        params.limit = value.limit;\n      }\n    }\n\n    this.httpAdapter.get(this._endpoint, params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n            if (result.error) {\n              return callback(new Error(result.error));\n            }\n\n            var results = [];\n\n            if (result.features) {\n              for (var i = 0; i < result.features.length; i++) {\n                results.push(_this._formatResult(result.features[i]));\n              }\n            }\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nOpendataFranceGeocoder.prototype._formatResult = function(result) {\n\n    var latitude = result.geometry.coordinates[1];\n    if (latitude) {\n      latitude = parseFloat(latitude);\n    }\n\n    var longitude = result.geometry.coordinates[0];\n    if (longitude) {\n      longitude = parseFloat(longitude);\n    }\n\n    var properties = result.properties;\n\n    var formatedResult = {\n        latitude : latitude,\n        longitude : longitude,\n        state : properties.context,\n        city : properties.city,\n        zipcode : properties.postcode,\n        citycode : properties.citycode,\n        countryCode : 'FR',\n        country : 'France',\n        type: properties.type,\n        id: properties.id\n    };\n\n    if (properties.type === 'housenumber') {\n      formatedResult.streetName = properties.street;\n      formatedResult.streetNumber = properties.housenumber;\n    } else if (properties.type === 'street') {\n      formatedResult.streetName = properties.name;\n    } else if (properties.type === 'city') {\n      formatedResult.population = properties.population;\n      formatedResult.adm_weight = properties.adm_weight;\n    } else if (properties.type === 'village') {\n      formatedResult.population = properties.population;\n    } else if (properties.type === 'locality') {\n      formatedResult.streetName = properties.name;\n    }\n\n    return formatedResult;\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>, ...}  lat: Latitude, lon: Longitude, ... see https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* @param <function> callback Callback method\n*/\nOpendataFranceGeocoder.prototype._reverse = function(query, callback) {\n\n    var _this = this;\n\n    var params = this._getCommonParams();\n    for (var k in query) {\n      var v = query[k];\n      params[k] = v;\n    }\n\n    this.httpAdapter.get(this._endpoint_reverse , params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n          if(result.error) {\n            return callback(new Error(result.error));\n          }\n\n          var results = [];\n\n          if (result.features) {\n            for (var i = 0; i < result.features.length; i++) {\n              results.push(_this._formatResult(result.features[i]));\n            }\n          }\n\n          results.raw = result;\n          callback(false, results);\n        }\n    });\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nOpendataFranceGeocoder.prototype._getCommonParams = function(){\n    var params = {};\n\n    for (var k in this.options) {\n      var v = this.options[k];\n      if (!v) {\n        continue;\n      }\n      if (k === 'language') {\n        k = 'accept-language';\n      }\n      params[k] = v;\n    }\n\n    return params;\n};\n\nmodule.exports = OpendataFranceGeocoder;\n"]},"metadata":{},"sourceType":"script"}