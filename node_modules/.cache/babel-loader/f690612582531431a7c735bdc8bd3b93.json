{"ast":null,"code":"const AbstractGeocoder = require('./abstractgeocoder');\n\nconst OPTIONS = ['apiKey', 'appId', 'appCode', 'language', 'politicalView', 'country', 'state', 'production'];\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (appId, appCode, language, politicalView, country, state, production)\n */\n\nclass HereGeocoder extends AbstractGeocoder {\n  constructor(httpAdapter, options) {\n    super(httpAdapter, options);\n    this.options = options;\n    OPTIONS.forEach(option => {\n      if (!options[option] || options[option] == 'undefined') {\n        this.options[option] = null;\n      }\n    }); // appId and appCode are deprecated\n\n    if (!this.options.apiKey && !(this.options.appId && this.options.appCode)) {\n      throw new Error('You must specify apiKey to use Here Geocoder');\n    }\n  }\n  /**\n   * Geocode\n   * @param <string>   value    Value to geocode (Address)\n   * @param <function> callback Callback method\n   */\n\n\n  _geocode(value, callback) {\n    var _this = this;\n\n    var params = this._prepareQueryString();\n\n    if (value.address) {\n      if (value.language) {\n        params.language = value.language;\n      }\n\n      if (value.politicalView) {\n        params.politicalview = value.politicalView;\n      }\n\n      if (value.country) {\n        params.country = value.country;\n\n        if (value.state) {\n          params.state = value.state;\n        } else {\n          delete params.state;\n        }\n      }\n\n      if (value.zipcode) {\n        params.postalcode = value.zipcode;\n      }\n\n      params.searchtext = value.address;\n    } else {\n      params.searchtext = value;\n    }\n\n    this.httpAdapter.get(this._geocodeEndpoint, params, function (err, result) {\n      var results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        var view = result.Response.View[0];\n\n        if (!view) {\n          return callback(false, results);\n        } // Format each geocoding result\n\n\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  }\n  /**\n   * Reverse geocoding\n   * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n   * @param <function> callback Callback method\n   */\n\n\n  _reverse(query, callback) {\n    var lat = query.lat;\n    var lng = query.lon;\n\n    var _this = this;\n\n    var params = this._prepareQueryString();\n\n    params.pos = lat + ',' + lng;\n    params.mode = 'trackPosition';\n    this.httpAdapter.get(this._reverseEndpoint, params, function (err, result) {\n      var results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        var view = result.Response.View[0];\n\n        if (!view) {\n          return callback(false, results);\n        } // Format each geocoding result\n\n\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  }\n\n  _formatResult(result) {\n    var location = result.Location || {};\n    var address = location.Address || {};\n    var i;\n    var extractedObj = {\n      formattedAddress: address.Label || null,\n      latitude: location.DisplayPosition.Latitude,\n      longitude: location.DisplayPosition.Longitude,\n      country: null,\n      countryCode: address.Country || null,\n      state: address.State || null,\n      county: address.County || null,\n      city: address.City || null,\n      zipcode: address.PostalCode || null,\n      district: address.District || null,\n      streetName: address.Street || null,\n      streetNumber: address.HouseNumber || null,\n      building: address.Building || null,\n      extra: {\n        herePlaceId: location.LocationId || null,\n        confidence: result.Relevance || 0\n      },\n      administrativeLevels: {}\n    };\n\n    for (i = 0; i < address.AdditionalData.length; i++) {\n      var additionalData = address.AdditionalData[i];\n\n      switch (additionalData.key) {\n        //Country 2-digit code\n        case 'Country2':\n          extractedObj.countryCode = additionalData.value;\n          break;\n        //Country name\n\n        case 'CountryName':\n          extractedObj.country = additionalData.value;\n          break;\n        //State name\n\n        case 'StateName':\n          extractedObj.administrativeLevels.level1long = additionalData.value;\n          extractedObj.state = additionalData.value;\n          break;\n        //County name\n\n        case 'CountyName':\n          extractedObj.administrativeLevels.level2long = additionalData.value;\n          extractedObj.county = additionalData.value;\n      }\n    }\n\n    return extractedObj;\n  }\n\n  _prepareQueryString() {\n    var params = {\n      additionaldata: 'Country2,true',\n      gen: 8\n    }; // Deprecated\n\n    if (this.options.appId) {\n      params.app_id = this.options.appId;\n    } // Deprecated\n\n\n    if (this.options.appCode) {\n      params.app_code = this.options.appCode;\n    }\n\n    if (this.options.apiKey) {\n      params.apiKey = this.options.apiKey;\n    }\n\n    if (this.options.language) {\n      params.language = this.options.language;\n    }\n\n    if (this.options.politicalView) {\n      params.politicalview = this.options.politicalView;\n    }\n\n    if (this.options.country) {\n      params.country = this.options.country;\n    }\n\n    if (this.options.state) {\n      params.state = this.options.state;\n    }\n\n    return params;\n  }\n\n}\n\nObject.defineProperties(HereGeocoder.prototype, {\n  // Here geocoding API endpoint\n  _geocodeEndpoint: {\n    get: function () {\n      return 'https://geocoder.ls.hereapi.com/6.2/geocode.json';\n    }\n  },\n  // Here reverse geocoding API endpoint\n  _reverseEndpoint: {\n    get: function () {\n      return 'https://reverse.geocoder.ls.hereapi.com/6.2/reversegeocode.json';\n    }\n  }\n});\nmodule.exports = HereGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/heregeocoder.js"],"names":["AbstractGeocoder","require","OPTIONS","HereGeocoder","constructor","httpAdapter","options","forEach","option","apiKey","appId","appCode","Error","_geocode","value","callback","_this","params","_prepareQueryString","address","language","politicalView","politicalview","country","state","zipcode","postalcode","searchtext","get","_geocodeEndpoint","err","result","results","raw","view","Response","View","Result","map","_formatResult","_reverse","query","lat","lng","lon","pos","mode","_reverseEndpoint","location","Location","Address","i","extractedObj","formattedAddress","Label","latitude","DisplayPosition","Latitude","longitude","Longitude","countryCode","Country","State","county","County","city","City","PostalCode","district","District","streetName","Street","streetNumber","HouseNumber","building","Building","extra","herePlaceId","LocationId","confidence","Relevance","administrativeLevels","AdditionalData","length","additionalData","key","level1long","level2long","additionaldata","gen","app_id","app_code","Object","defineProperties","prototype","module","exports"],"mappings":"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","sourcesContent":["const AbstractGeocoder = require('./abstractgeocoder');\n\nconst OPTIONS = [\n  'apiKey',\n  'appId',\n  'appCode',\n  'language',\n  'politicalView',\n  'country',\n  'state',\n  'production'\n];\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (appId, appCode, language, politicalView, country, state, production)\n */\nclass HereGeocoder extends AbstractGeocoder {\n  constructor(httpAdapter, options) {\n    super(httpAdapter, options);\n    this.options = options;\n    OPTIONS.forEach(option => {\n      if (!options[option] || options[option] == 'undefined') {\n        this.options[option] = null;\n      }\n    });\n\n    // appId and appCode are deprecated\n    if (!this.options.apiKey && !(this.options.appId && this.options.appCode)) {\n      throw new Error('You must specify apiKey to use Here Geocoder');\n    }\n  }\n\n  /**\n   * Geocode\n   * @param <string>   value    Value to geocode (Address)\n   * @param <function> callback Callback method\n   */\n  _geocode(value, callback) {\n    var _this = this;\n    var params = this._prepareQueryString();\n\n    if (value.address) {\n      if (value.language) {\n        params.language = value.language;\n      }\n      if (value.politicalView) {\n        params.politicalview = value.politicalView;\n      }\n      if (value.country) {\n        params.country = value.country;\n        if (value.state) {\n          params.state = value.state;\n        } else {\n          delete params.state;\n        }\n      }\n      if (value.zipcode) {\n        params.postalcode = value.zipcode;\n      }\n      params.searchtext = value.address;\n    } else {\n      params.searchtext = value;\n    }\n\n    this.httpAdapter.get(this._geocodeEndpoint, params, function(err, result) {\n      var results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        var view = result.Response.View[0];\n        if (!view) {\n          return callback(false, results);\n        }\n\n        // Format each geocoding result\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n\n        callback(false, results);\n      }\n    });\n  }\n\n  /**\n   * Reverse geocoding\n   * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n   * @param <function> callback Callback method\n   */\n  _reverse(query, callback) {\n    var lat = query.lat;\n    var lng = query.lon;\n\n    var _this = this;\n    var params = this._prepareQueryString();\n    params.pos = lat + ',' + lng;\n    params.mode = 'trackPosition';\n\n    this.httpAdapter.get(this._reverseEndpoint, params, function(err, result) {\n      var results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        var view = result.Response.View[0];\n        if (!view) {\n          return callback(false, results);\n        }\n\n        // Format each geocoding result\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n\n        callback(false, results);\n      }\n    });\n  }\n\n  _formatResult(result) {\n    var location = result.Location || {};\n    var address = location.Address || {};\n    var i;\n\n    var extractedObj = {\n      formattedAddress: address.Label || null,\n      latitude: location.DisplayPosition.Latitude,\n      longitude: location.DisplayPosition.Longitude,\n      country: null,\n      countryCode: address.Country || null,\n      state: address.State || null,\n      county: address.County || null,\n      city: address.City || null,\n      zipcode: address.PostalCode || null,\n      district: address.District || null,\n      streetName: address.Street || null,\n      streetNumber: address.HouseNumber || null,\n      building: address.Building || null,\n      extra: {\n        herePlaceId: location.LocationId || null,\n        confidence: result.Relevance || 0\n      },\n      administrativeLevels: {}\n    };\n\n    for (i = 0; i < address.AdditionalData.length; i++) {\n      var additionalData = address.AdditionalData[i];\n      switch (additionalData.key) {\n        //Country 2-digit code\n        case 'Country2':\n          extractedObj.countryCode = additionalData.value;\n          break;\n        //Country name\n        case 'CountryName':\n          extractedObj.country = additionalData.value;\n          break;\n        //State name\n        case 'StateName':\n          extractedObj.administrativeLevels.level1long = additionalData.value;\n          extractedObj.state = additionalData.value;\n          break;\n        //County name\n        case 'CountyName':\n          extractedObj.administrativeLevels.level2long = additionalData.value;\n          extractedObj.county = additionalData.value;\n      }\n    }\n\n    return extractedObj;\n  }\n  _prepareQueryString() {\n    var params = {\n      additionaldata: 'Country2,true',\n      gen: 8\n    };\n\n    // Deprecated\n    if (this.options.appId) {\n      params.app_id = this.options.appId;\n    }\n    // Deprecated\n    if (this.options.appCode) {\n      params.app_code = this.options.appCode;\n    }\n\n    if (this.options.apiKey) {\n      params.apiKey = this.options.apiKey;\n    }\n    if (this.options.language) {\n      params.language = this.options.language;\n    }\n    if (this.options.politicalView) {\n      params.politicalview = this.options.politicalView;\n    }\n    if (this.options.country) {\n      params.country = this.options.country;\n    }\n    if (this.options.state) {\n      params.state = this.options.state;\n    }\n\n    return params;\n  }\n}\n\nObject.defineProperties(HereGeocoder.prototype, {\n  // Here geocoding API endpoint\n  _geocodeEndpoint: {\n    get: function() {\n      return 'https://geocoder.ls.hereapi.com/6.2/geocode.json';\n    }\n  },\n\n  // Here reverse geocoding API endpoint\n  _reverseEndpoint: {\n    get: function() {\n      return 'https://reverse.geocoder.ls.hereapi.com/6.2/reversegeocode.json';\n    }\n  }\n});\n\nmodule.exports = HereGeocoder;\n"]},"metadata":{},"sourceType":"script"}