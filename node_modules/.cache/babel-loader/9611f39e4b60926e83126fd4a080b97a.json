{"ast":null,"code":"// inspired from package haversine originally By Nick Justice (niix) at https://github.com/niix/haversine\n\n/**\n * converts a number to radian value\n * @param {number} num a number\n */\nfunction toRadian(num) {\n  return num * Math.PI / 180;\n}\n/**\n * finds the distance between two lat-long values\n * @param {object} start start lat-long\n * @param {object} end end lat-long\n * @param {object} options any options\n */\n\n\nfunction distance(start, end) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // init constants\n  var km = 6371;\n  var mile = 3960; // convert everything to radians\n\n  var R = options.unit === 'mile' ? mile : km;\n  var dLat = toRadian(end.latitude - start.latitude);\n  var dLon = toRadian(end.longitude - start.longitude);\n  var lat1 = toRadian(start.latitude);\n  var lat2 = toRadian(end.latitude);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var distanceValue = 0;\n\n  if (options.threshold) {\n    distanceValue = options.threshold > R * c;\n  } else {\n    distanceValue = R * c;\n  }\n\n  return distanceValue;\n}\n\nmodule.exports.distance = distance;","map":null,"metadata":{},"sourceType":"script"}