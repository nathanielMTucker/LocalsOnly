{"ast":null,"code":"var haversine = require('./haversine');\n/**\n * iterates over locations to find closest location to given input lat-long values\n * @param  {Number} latitude  latitude value\n * @param  {Number} longitude longitude value\n * @param  {String} countryCode Country Code. Should exist in /locations/{countryCode}.json\n * @return {Object}           city data in an object\n */\n\n\nfunction lookup(latitude, longitude, countryCode) {\n  var minDistance = Infinity;\n  var city = {}; // start with inout values\n\n  var start = {\n    latitude: latitude,\n    longitude: longitude\n  }; // iterate through all locations\n\n  try {\n    var otherCountryOrigin = require(\"../locations/\".concat(countryCode.toUpperCase(), \".json\"));\n\n    otherCountryOrigin.forEach(function (location) {\n      var distance = haversine.distance(start, location);\n\n      if (distance < minDistance) {\n        city = location;\n        minDistance = distance;\n      }\n    });\n  } catch (e) {\n    return undefined;\n  } // add distance to city object\n\n\n  city.distance = minDistance; // return city object\n\n  return city;\n}\n\nmodule.exports.lookup = lookup;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/reverse-geocode/lib/reverse-geocode.js"],"names":["haversine","require","lookup","latitude","longitude","countryCode","minDistance","Infinity","city","start","otherCountryOrigin","toUpperCase","forEach","location","distance","e","undefined","module","exports"],"mappings":"AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;AAEA;;;;;;;;;AAOA,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,WAAtC,EAAmD;AACjD,MAAIC,WAAW,GAAGC,QAAlB;AACA,MAAIC,IAAI,GAAG,EAAX,CAFiD,CAIjD;;AACA,MAAMC,KAAK,GAAG;AAAEN,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,SAAS,EAATA;AAAZ,GAAd,CALiD,CAOjD;;AACA,MAAI;AACF,QAAMM,kBAAkB,GAAGT,OAAO,wBAAiBI,WAAW,CAACM,WAAZ,EAAjB,WAAlC;;AACAD,IAAAA,kBAAkB,CAACE,OAAnB,CAA2B,UAAAC,QAAQ,EAAI;AACrC,UAAMC,QAAQ,GAAGd,SAAS,CAACc,QAAV,CAAmBL,KAAnB,EAA0BI,QAA1B,CAAjB;;AACA,UAAIC,QAAQ,GAAGR,WAAf,EAA4B;AAC1BE,QAAAA,IAAI,GAAGK,QAAP;AACAP,QAAAA,WAAW,GAAGQ,QAAd;AACD;AACF,KAND;AAOD,GATD,CASE,OAAOC,CAAP,EAAU;AACV,WAAOC,SAAP;AACD,GAnBgD,CAqBjD;;;AACAR,EAAAA,IAAI,CAACM,QAAL,GAAgBR,WAAhB,CAtBiD,CAwBjD;;AACA,SAAOE,IAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,CAAehB,MAAf,GAAwBA,MAAxB","sourcesContent":["const haversine = require('./haversine')\n\n/**\n * iterates over locations to find closest location to given input lat-long values\n * @param  {Number} latitude  latitude value\n * @param  {Number} longitude longitude value\n * @param  {String} countryCode Country Code. Should exist in /locations/{countryCode}.json\n * @return {Object}           city data in an object\n */\nfunction lookup (latitude, longitude, countryCode) {\n  let minDistance = Infinity\n  let city = {}\n\n  // start with inout values\n  const start = { latitude, longitude }\n\n  // iterate through all locations\n  try {\n    const otherCountryOrigin = require(`../locations/${countryCode.toUpperCase()}.json`)\n    otherCountryOrigin.forEach(location => {\n      const distance = haversine.distance(start, location)\n      if (distance < minDistance) {\n        city = location\n        minDistance = distance\n      }\n    })\n  } catch (e) {\n    return undefined\n  }\n\n  // add distance to city object\n  city.distance = minDistance\n\n  // return city object\n  return city\n}\n\nmodule.exports.lookup = lookup\n"]},"metadata":{},"sourceType":"script"}