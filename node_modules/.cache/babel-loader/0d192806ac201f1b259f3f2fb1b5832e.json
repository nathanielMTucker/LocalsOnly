{"ast":null,"code":"var util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder'); // http://geocoder.opencagedata.com/api.html#confidence\n\n\nvar ConfidenceInKM = {\n  10: 0.25,\n  9: 0.5,\n  8: 1,\n  7: 5,\n  6: 7.5,\n  5: 10,\n  4: 15,\n  3: 20,\n  2: 25,\n  1: Number.POSITIVE_INFINITY,\n  0: Number.NaN\n};\n/**\n * Constructor\n */\n\nvar OpenCageGeocoder = function OpenCageGeocoder(httpAdapter, apiKey, options) {\n  this.options = ['language'];\n  OpenCageGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'http://api.opencagedata.com/geocode/v1/json';\n  this._ConfidenceInKM = ConfidenceInKM; // In case we need to support v1/v2 and this changes\n};\n\nutil.inherits(OpenCageGeocoder, AbstractGeocoder);\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\n\nOpenCageGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  if (value.address) {\n    if (value.bounds) {\n      if (Array.isArray(value.bounds)) {\n        params.bounds = value.bounds.join(',');\n      } else {\n        params.bounds = value.bounds;\n      }\n    }\n\n    if (value.countryCode) {\n      params.countrycode = value.countryCode;\n    }\n\n    if (value.limit) {\n      params.limit = value.limit;\n    }\n\n    if (value.minConfidence) {\n      params.min_confidence = value.minConfidence;\n    }\n\n    params.q = value.address;\n  } else {\n    params.q = value;\n  }\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      if (result && result.results instanceof Array) {\n        for (var i = 0; i < result.results.length; i++) {\n          results.push(_this._formatResult(result.results[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nOpenCageGeocoder.prototype._formatResult = function (result) {\n  var confidence = result.confidence || 0;\n  return {\n    'latitude': result.geometry.lat,\n    'longitude': result.geometry.lng,\n    'country': result.components.country,\n    'city': result.components.city,\n    'state': result.components.state,\n    'zipcode': result.components.postcode,\n    'streetName': result.components.road,\n    'streetNumber': result.components.house_number,\n    'countryCode': result.components.country_code,\n    'county': result.components.county,\n    'extra': {\n      confidence: confidence,\n      confidenceKM: this._ConfidenceInKM[result.confidence] || Number.NaN\n    }\n  };\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nOpenCageGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  params.q = lat + ' ' + lng;\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      callback(err);\n    } else {\n      var results = [];\n\n      if (result && result.results instanceof Array) {\n        for (var i = 0; i < result.results.length; i++) {\n          results.push(_this._formatResult(result.results[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n/**\n * Prepare common params\n *\n * @return <Object> common params\n */\n\n\nOpenCageGeocoder.prototype._getCommonParams = function () {\n  var params = {};\n  params.key = this.apiKey;\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  return params;\n};\n\nmodule.exports = OpenCageGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/opencagegeocoder.js"],"names":["util","require","AbstractGeocoder","ConfidenceInKM","Number","POSITIVE_INFINITY","NaN","OpenCageGeocoder","httpAdapter","apiKey","options","super_","call","Error","constructor","name","_endpoint","_ConfidenceInKM","inherits","prototype","_geocode","value","callback","_this","params","_getCommonParams","address","bounds","Array","isArray","join","countryCode","countrycode","limit","minConfidence","min_confidence","q","get","err","result","results","i","length","push","_formatResult","raw","confidence","geometry","lat","lng","components","country","city","state","postcode","road","house_number","country_code","county","confidenceKM","_reverse","query","lon","key","language","module","exports"],"mappings":"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","sourcesContent":["var util = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n// http://geocoder.opencagedata.com/api.html#confidence\nvar ConfidenceInKM = {\n  10: 0.25,\n  9: 0.5,\n  8: 1,\n  7: 5,\n  6: 7.5,\n  5: 10,\n  4: 15,\n  3: 20,\n  2: 25,\n  1: Number.POSITIVE_INFINITY,\n  0: Number.NaN\n};\n\n/**\n * Constructor\n */\nvar OpenCageGeocoder = function OpenCageGeocoder(httpAdapter, apiKey, options) {\n  this.options = ['language'];\n\n  OpenCageGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'http://api.opencagedata.com/geocode/v1/json';\n  this._ConfidenceInKM = ConfidenceInKM; // In case we need to support v1/v2 and this changes\n};\n\nutil.inherits(OpenCageGeocoder, AbstractGeocoder);\n\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\nOpenCageGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n  if (value.address) {\n    if (value.bounds) {\n      if (Array.isArray(value.bounds)) {\n        params.bounds = value.bounds.join(',');\n      }\n      else {\n        params.bounds = value.bounds;\n      }\n    }\n    if (value.countryCode) {\n      params.countrycode = value.countryCode;\n    }\n    if (value.limit) {\n      params.limit = value.limit;\n    }\n    if (value.minConfidence) {\n      params.min_confidence = value.minConfidence;\n    }\n    params.q = value.address;\n  }\n  else {\n    params.q = value;\n  }\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n\n    if (err) {\n      return callback(err);\n    } else {\n\n      var results = [];\n\n      if (result && result.results instanceof Array) {\n        for (var i = 0; i < result.results.length; i++) {\n          results.push(_this._formatResult(result.results[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n\n  });\n\n};\n\nOpenCageGeocoder.prototype._formatResult = function (result) {\n  var confidence = result.confidence || 0;\n  return {\n    'latitude': result.geometry.lat,\n    'longitude': result.geometry.lng,\n    'country': result.components.country,\n    'city': result.components.city,\n    'state': result.components.state,\n    'zipcode': result.components.postcode,\n    'streetName': result.components.road,\n    'streetNumber': result.components.house_number,\n    'countryCode': result.components.country_code,\n    'county': result.components.county,\n    'extra': {\n      confidence: confidence,\n      confidenceKM: this._ConfidenceInKM[result.confidence] || Number.NaN\n    }\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nOpenCageGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  var params = this._getCommonParams();\n  params.q = lat + ' ' + lng;\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      callback(err);\n    } else {\n      var results = [];\n\n      if (result && result.results instanceof Array) {\n        for (var i = 0; i < result.results.length; i++) {\n          results.push(_this._formatResult(result.results[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\n/**\n * Prepare common params\n *\n * @return <Object> common params\n */\nOpenCageGeocoder.prototype._getCommonParams = function () {\n  var params = {};\n  params.key = this.apiKey;\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  return params;\n};\n\nmodule.exports = OpenCageGeocoder;\n"]},"metadata":{},"sourceType":"script"}