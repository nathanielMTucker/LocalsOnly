{"ast":null,"code":"var querystring = require('querystring'),\n    util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar MapzenGeocoder = function MapzenGeocoder(httpAdapter, apiKey) {\n  MapzenGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'https://search.mapzen.com/v1';\n};\n\nutil.inherits(MapzenGeocoder, AbstractGeocoder);\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\n\nMapzenGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/search', {\n    'text': value,\n    'api_key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (result.error) {\n      return callback(new Error('Status is ' + result.error), {\n        raw: result\n      });\n    }\n\n    var results = [];\n    var locations = result.features;\n\n    for (var i = 0; i < locations.length; i++) {\n      results.push(_this._formatResult(locations[i]));\n    }\n\n    results.raw = result;\n    callback(false, results);\n  });\n};\n\nMapzenGeocoder.prototype._formatResult = function (result) {\n  var accuracy = result.properties.confidence < 1 ? result.properties.confidence - 0.1 : 1;\n  return {\n    'latitude': result.geometry.coordinates[1],\n    'longitude': result.geometry.coordinates[0],\n    'country': result.properties.country,\n    'city': result.properties.locality,\n    'state': result.properties.region,\n    'zipcode': null,\n    'streetName': result.properties.street,\n    'streetNumber': result.properties.housenumber,\n    'countryCode': result.properties.country_a,\n    'extra': {\n      confidence: accuracy || 0\n    }\n  };\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nMapzenGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse', {\n    'point.lat': lat,\n    'point.lon': lng,\n    'api_key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    var results = [];\n    var locations = result.results;\n\n    for (var i = 0; i < locations.length; i++) {\n      results.push(_this._formatResult(locations[i]));\n    }\n\n    results.raw = result;\n    callback(false, results);\n  });\n};\n\nmodule.exports = MapzenGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/mapzengeocoder.js"],"names":["querystring","require","util","AbstractGeocoder","MapzenGeocoder","httpAdapter","apiKey","super_","call","Error","constructor","name","_endpoint","inherits","prototype","_geocode","value","callback","_this","get","unescape","err","result","error","raw","results","locations","features","i","length","push","_formatResult","accuracy","properties","confidence","geometry","coordinates","country","locality","region","street","housenumber","country_a","_reverse","query","lat","lng","lon","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;AAAA,IACEC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADhB;AAAA,IAEEE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAF5B;AAIA;;;;;AAGA,IAAIG,cAAc,GAAG,SAASA,cAAT,CAAwBC,WAAxB,EAAqCC,MAArC,EAA6C;AAEhEF,EAAAA,cAAc,CAACG,MAAf,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiCH,WAAjC;;AAEA,MAAI,CAACC,MAAD,IAAWA,MAAM,IAAI,WAAzB,EAAsC;AAEpC,UAAM,IAAIG,KAAJ,CAAU,KAAKC,WAAL,CAAiBC,IAAjB,GAAwB,kBAAlC,CAAN;AACD;;AAED,OAAKL,MAAL,GAAcA,MAAd;AACA,OAAKM,SAAL,GAAiB,8BAAjB;AACD,CAXD;;AAaAV,IAAI,CAACW,QAAL,CAAcT,cAAd,EAA8BD,gBAA9B;AAEA;;;;;;AAKAC,cAAc,CAACU,SAAf,CAAyBC,QAAzB,GAAoC,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC7D,MAAIC,KAAK,GAAG,IAAZ;;AACA,OAAKb,WAAL,CAAiBc,GAAjB,CAAqB,KAAKP,SAAL,GAAiB,SAAtC,EAAiD;AAC/C,YAAQI,KADuC;AAE/C,eAAWhB,WAAW,CAACoB,QAAZ,CAAqB,KAAKd,MAA1B;AAFoC,GAAjD,EAGG,UAAUe,GAAV,EAAeC,MAAf,EAAuB;AACxB,QAAID,GAAJ,EAAS;AACP,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACD;;AACD,QAAIC,MAAM,CAACC,KAAX,EAAkB;AAChB,aAAON,QAAQ,CAAC,IAAIR,KAAJ,CAAU,eAAea,MAAM,CAACC,KAAhC,CAAD,EAAyC;AAACC,QAAAA,GAAG,EAAEF;AAAN,OAAzC,CAAf;AACD;;AAED,QAAIG,OAAO,GAAG,EAAd;AAEA,QAAIC,SAAS,GAAGJ,MAAM,CAACK,QAAvB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCH,MAAAA,OAAO,CAACK,IAAR,CAAaZ,KAAK,CAACa,aAAN,CAAoBL,SAAS,CAACE,CAAD,CAA7B,CAAb;AACD;;AAEDH,IAAAA,OAAO,CAACD,GAAR,GAAcF,MAAd;AACAL,IAAAA,QAAQ,CAAC,KAAD,EAAQQ,OAAR,CAAR;AACD,GArBD;AAsBD,CAxBD;;AA0BArB,cAAc,CAACU,SAAf,CAAyBiB,aAAzB,GAAyC,UAAUT,MAAV,EAAkB;AACzD,MAAIU,QAAQ,GAAIV,MAAM,CAACW,UAAP,CAAkBC,UAAlB,GAA+B,CAAhC,GAAqCZ,MAAM,CAACW,UAAP,CAAkBC,UAAlB,GAA+B,GAApE,GAA0E,CAAzF;AAEA,SAAO;AACL,gBAAYZ,MAAM,CAACa,QAAP,CAAgBC,WAAhB,CAA4B,CAA5B,CADP;AAEL,iBAAad,MAAM,CAACa,QAAP,CAAgBC,WAAhB,CAA4B,CAA5B,CAFR;AAGL,eAAWd,MAAM,CAACW,UAAP,CAAkBI,OAHxB;AAIL,YAAQf,MAAM,CAACW,UAAP,CAAkBK,QAJrB;AAKL,aAAShB,MAAM,CAACW,UAAP,CAAkBM,MALtB;AAML,eAAW,IANN;AAOL,kBAAcjB,MAAM,CAACW,UAAP,CAAkBO,MAP3B;AAQL,oBAAgBlB,MAAM,CAACW,UAAP,CAAkBQ,WAR7B;AASL,mBAAenB,MAAM,CAACW,UAAP,CAAkBS,SAT5B;AAUL,aAAS;AACPR,MAAAA,UAAU,EAAEF,QAAQ,IAAI;AADjB;AAVJ,GAAP;AAcD,CAjBD;AAmBA;;;;;;;AAKA5B,cAAc,CAACU,SAAf,CAAyB6B,QAAzB,GAAoC,UAAUC,KAAV,EAAiB3B,QAAjB,EAA2B;AAC7D,MAAI4B,GAAG,GAAGD,KAAK,CAACC,GAAhB;AACA,MAAIC,GAAG,GAAGF,KAAK,CAACG,GAAhB;;AAEA,MAAI7B,KAAK,GAAG,IAAZ;;AAEA,OAAKb,WAAL,CAAiBc,GAAjB,CAAqB,KAAKP,SAAL,GAAiB,UAAtC,EAAkD;AAChD,iBAAaiC,GADmC;AAEhD,iBAAaC,GAFmC;AAGhD,eAAW9C,WAAW,CAACoB,QAAZ,CAAqB,KAAKd,MAA1B;AAHqC,GAAlD,EAIG,UAAUe,GAAV,EAAeC,MAAf,EAAuB;AACxB,QAAID,GAAJ,EAAS;AACP,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACD;;AAED,QAAII,OAAO,GAAG,EAAd;AACA,QAAIC,SAAS,GAAGJ,MAAM,CAACG,OAAvB;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCH,MAAAA,OAAO,CAACK,IAAR,CAAaZ,KAAK,CAACa,aAAN,CAAoBL,SAAS,CAACE,CAAD,CAA7B,CAAb;AACD;;AAEDH,IAAAA,OAAO,CAACD,GAAR,GAAcF,MAAd;AACAL,IAAAA,QAAQ,CAAC,KAAD,EAAQQ,OAAR,CAAR;AACD,GAlBD;AAmBD,CAzBD;;AA2BAuB,MAAM,CAACC,OAAP,GAAiB7C,cAAjB","sourcesContent":["var querystring = require('querystring'),\n  util = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar MapzenGeocoder = function MapzenGeocoder(httpAdapter, apiKey) {\n\n  MapzenGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n\n    throw new Error(this.constructor.name + ' needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n  this._endpoint = 'https://search.mapzen.com/v1';\n};\n\nutil.inherits(MapzenGeocoder, AbstractGeocoder);\n\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\nMapzenGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n  this.httpAdapter.get(this._endpoint + '/search', {\n    'text': value,\n    'api_key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n    if (result.error) {\n      return callback(new Error('Status is ' + result.error), {raw: result});\n    }\n\n    var results = [];\n\n    var locations = result.features;\n\n    for (var i = 0; i < locations.length; i++) {\n      results.push(_this._formatResult(locations[i]));\n    }\n\n    results.raw = result;\n    callback(false, results);\n  });\n};\n\nMapzenGeocoder.prototype._formatResult = function (result) {\n  var accuracy = (result.properties.confidence < 1) ? result.properties.confidence - 0.1 : 1;\n\n  return {\n    'latitude': result.geometry.coordinates[1],\n    'longitude': result.geometry.coordinates[0],\n    'country': result.properties.country,\n    'city': result.properties.locality,\n    'state': result.properties.region,\n    'zipcode': null,\n    'streetName': result.properties.street,\n    'streetNumber': result.properties.housenumber,\n    'countryCode': result.properties.country_a,\n    'extra': {\n      confidence: accuracy || 0\n    }\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nMapzenGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse', {\n    'point.lat': lat,\n    'point.lon': lng,\n    'api_key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    var results = [];\n    var locations = result.results;\n\n    for (var i = 0; i < locations.length; i++) {\n      results.push(_this._formatResult(locations[i]));\n    }\n\n    results.raw = result;\n    callback(false, results);\n  });\n};\n\nmodule.exports = MapzenGeocoder;\n"]},"metadata":{},"sourceType":"script"}