{"ast":null,"code":"'use strict';\n\nvar net = require('net');\n/**\n * Constructor\n * @param {Object} httpAdapter Http Adapter\n * @param {Object} options     Options (language, client_id, client_secret)\n */\n\n\nvar AGOLGeocoder = function AGOLGeocoder(httpAdapter, options) {\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error('ArcGis Online Geocoder requires a httpAdapter to be defined');\n  }\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (!options.client_id || options.client_id == 'undefined') {\n    options.client_id = null;\n  }\n\n  if (!options.client_secret || options.client_secret == 'undefined') {\n    options.client_secret = null;\n  }\n\n  if (!options.client_secret || !options.client_id) {\n    throw new Error('You must specify the client_id and the client_secret');\n  }\n\n  this.options = options;\n  this.httpAdapter = httpAdapter;\n  this.cache = {};\n};\n\nAGOLGeocoder.prototype._authEndpoint = 'https://www.arcgis.com/sharing/oauth2/token';\nAGOLGeocoder.prototype._endpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find';\nAGOLGeocoder.prototype._reverseEndpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode'; //Cached vars\n\nAGOLGeocoder.prototype._cachedToken = {\n  'now': function () {\n    return new Date().getTime();\n  },\n  'put': function (token, experation, cache) {\n    cache.token = token; //Shave 30 secs off experation to ensure that we expire slightly before the actual expiration\n\n    cache.tokenExp = this.now() + (experation - 30);\n  },\n  'get': function (cache) {\n    if (!cache) {\n      return null;\n    }\n\n    if (this.now() <= cache.tokenExp) {\n      return cache.token;\n    } else {\n      return null;\n    }\n  }\n};\n\nAGOLGeocoder.prototype._getToken = function (callback) {\n  var _this = this;\n\n  if (_this._cachedToken.get(_this.cache) !== null) {\n    callback(_this._cachedToken.get());\n    return;\n  }\n\n  var params = {\n    'grant_type': 'client_credentials',\n    'client_id': _this.options.client_id,\n    'client_secret': _this.options.client_secret\n  };\n\n  _this.httpAdapter.get(_this._authEndpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      result = JSON.parse(result);\n      var tokenExpiration = new Date().getTime() + result.expires_in;\n      var token = result.access_token;\n\n      _this._cachedToken.put(token, tokenExpiration, _this.cache);\n\n      callback(false, token);\n    }\n  });\n};\n/**\n * Geocode\n * @param {String}   value    Value to geocode (Address)\n * @param {Function} callback Callback method\n */\n\n\nAGOLGeocoder.prototype.geocode = function (value, callback) {\n  var _this = this;\n\n  if (net.isIP(value)) {\n    throw new Error('The AGOL geocoder does not support IP addresses');\n  }\n\n  if (value instanceof Array) {\n    //As defined in http://resources.arcgis.com/en/help/arcgis-rest-api/#/Batch_geocoding/02r300000003000000/\n    throw new Error('An ArcGIS Online organizational account is required to use the batch geocoding functionality');\n  }\n\n  var execute = function (value, token, callback) {\n    var params = {\n      'token': token,\n      'f': 'json',\n      'text': value,\n      'outFields': 'AddNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._endpoint, params, function (err, result) {\n      result = JSON.parse(result);\n\n      if (err) {\n        return callback(err);\n      } else {\n        //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n        if (result.error) {\n          callback(result.error);\n          return null;\n        }\n\n        var results = [];\n\n        for (var i = 0; i < result.locations.length; i++) {\n          results.push(_this._formatResult(result.locations[i]));\n        }\n\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  };\n\n  this._getToken(function (err, token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(value, token, callback);\n    }\n  });\n};\n\nAGOLGeocoder.prototype._formatResult = function (result) {\n  if (result.address) {\n    return {\n      'latitude': result.location.y,\n      'longitude': result.location.x,\n      'country': result.address.CountryCode,\n      'city': result.address.City,\n      'state': result.address.Region,\n      'zipcode': result.address.Postal,\n      'countryCode': result.address.CountryCode,\n      'address': result.address.Address,\n      'neighborhood': result.address.Neighborhood,\n      'loc_name': result.address.Loc_name\n    };\n  }\n\n  var country = null;\n  var countryCode = null;\n  var city = null;\n  var state = null;\n  var stateCode = null;\n  var zipcode = null;\n  var streetPreDir = null;\n  var streetType = null;\n  var streetName = null;\n  var streetNumber = null;\n  var attributes = result.feature.attributes;\n\n  for (var property in attributes) {\n    if (attributes.hasOwnProperty(property)) {\n      if (property == 'City') {\n        city = attributes[property];\n      }\n\n      if (property == 'Postal') {\n        zipcode = attributes[property];\n      }\n\n      if (property == 'Region') {\n        state = attributes[property];\n      }\n\n      if (property == 'StPreDir') {\n        streetPreDir = attributes[property];\n      }\n\n      if (property == 'AddNum') {\n        streetNumber = attributes[property];\n      }\n\n      if (property == 'StName') {\n        streetName = attributes[property];\n      }\n\n      if (property == 'StType') {\n        streetType = attributes[property];\n      }\n\n      if (property == 'Country') {\n        countryCode = attributes[property];\n        country = attributes[property];\n      }\n    }\n  }\n\n  return {\n    'latitude': result.feature.geometry.y,\n    'longitude': result.feature.geometry.x,\n    'country': country,\n    'city': city,\n    'state': state,\n    'stateCode': stateCode,\n    'zipcode': zipcode,\n    'streetName': streetPreDir + ' ' + streetName + ' ' + streetType,\n    'streetNumber': streetNumber,\n    'countryCode': countryCode\n  };\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param {function} callback Callback method\n */\n\n\nAGOLGeocoder.prototype.reverse = function (query, callback) {\n  var lat = query.lat;\n  var long = query.lon;\n\n  var _this = this;\n\n  var execute = function (lat, long, token, callback) {\n    var params = {\n      'token': token,\n      'f': 'json',\n      'location': long + ',' + lat,\n      'outFields': 'AddrNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._reverseEndpoint, params, function (err, result) {\n      result = JSON.parse(result);\n\n      if (err) {\n        return callback(err);\n      } else {\n        //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n        if (result.error) {\n          callback(result.error, {\n            raw: result\n          });\n          return null;\n        }\n\n        var results = [];\n        results.push(_this._formatResult(result));\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  };\n\n  this._getToken(function (err, token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(lat, long, token, callback);\n    }\n  });\n};\n\nmodule.exports = AGOLGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/agolgeocoder.js"],"names":["net","require","AGOLGeocoder","httpAdapter","options","Error","client_id","client_secret","cache","prototype","_authEndpoint","_endpoint","_reverseEndpoint","_cachedToken","Date","getTime","token","experation","tokenExp","now","_getToken","callback","_this","get","params","err","result","JSON","parse","tokenExpiration","expires_in","access_token","put","geocode","value","isIP","Array","execute","error","results","i","locations","length","push","_formatResult","raw","address","location","y","x","CountryCode","City","Region","Postal","Address","Neighborhood","Loc_name","country","countryCode","city","state","stateCode","zipcode","streetPreDir","streetType","streetName","streetNumber","attributes","feature","property","hasOwnProperty","geometry","reverse","query","lat","long","lon","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar net = require('net');\n\n/**\n * Constructor\n * @param {Object} httpAdapter Http Adapter\n * @param {Object} options     Options (language, client_id, client_secret)\n */\nvar AGOLGeocoder = function AGOLGeocoder(httpAdapter, options) {\n\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error('ArcGis Online Geocoder requires a httpAdapter to be defined');\n  }\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (!options.client_id || options.client_id == 'undefined') {\n    options.client_id = null;\n  }\n\n  if (!options.client_secret || options.client_secret == 'undefined') {\n    options.client_secret = null;\n  }\n\n  if (!options.client_secret || !options.client_id) {\n\n    throw new Error('You must specify the client_id and the client_secret');\n  }\n\n  this.options = options;\n\n  this.httpAdapter = httpAdapter;\n  this.cache = {};\n};\n\nAGOLGeocoder.prototype._authEndpoint = 'https://www.arcgis.com/sharing/oauth2/token';\nAGOLGeocoder.prototype._endpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find';\nAGOLGeocoder.prototype._reverseEndpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode';\n\n//Cached vars\n\n\nAGOLGeocoder.prototype._cachedToken = {\n  'now': function() {\n    return (new Date()).getTime();\n  },\n  'put': function(token, experation,cache) {\n    cache.token = token;\n    //Shave 30 secs off experation to ensure that we expire slightly before the actual expiration\n    cache.tokenExp = this.now() + (experation - 30);\n  },\n  'get' : function(cache) {\n    if(!cache) {\n      return null;\n    }\n\n    if(this.now() <= cache.tokenExp) {\n      return cache.token;\n    } else {\n      return null;\n    }\n  }\n};\n\nAGOLGeocoder.prototype._getToken = function(callback) {\n  var _this = this;\n\n  if(_this._cachedToken.get(_this.cache) !== null) {\n    callback(_this._cachedToken.get());\n    return;\n    }\n\n  var params = {\n    'grant_type': 'client_credentials',\n    'client_id': _this.options.client_id,\n    'client_secret': _this.options.client_secret\n  };\n\n  _this.httpAdapter.get(_this._authEndpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      result = JSON.parse(result);\n      var tokenExpiration = (new Date()).getTime() + result.expires_in;\n      var token = result.access_token;\n      _this._cachedToken.put(token,tokenExpiration,_this.cache);\n\n      callback(false, token);\n    }\n  });\n};\n\n/**\n * Geocode\n * @param {String}   value    Value to geocode (Address)\n * @param {Function} callback Callback method\n */\nAGOLGeocoder.prototype.geocode = function(value, callback) {\n  var _this = this;\n\n  if (net.isIP(value)) {\n    throw new Error('The AGOL geocoder does not support IP addresses');\n  }\n\n  if (value instanceof Array) {\n    //As defined in http://resources.arcgis.com/en/help/arcgis-rest-api/#/Batch_geocoding/02r300000003000000/\n    throw new Error('An ArcGIS Online organizational account is required to use the batch geocoding functionality');\n  }\n\n  var execute = function (value,token,callback) {\n    var params = {\n      'token':token,\n      'f':'json',\n      'text':value,\n      'outFields': 'AddNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._endpoint, params, function(err, result) {\n      result = JSON.parse(result);\n        if (err) {\n          return callback(err);\n        } else {\n          //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n          if(result.error){\n            callback(result.error);\n\n            return null;\n          }\n\n          var results = [];\n          for(var i = 0; i < result.locations.length; i++) {\n            results.push(_this._formatResult(result.locations[i]));\n          }\n\n          results.raw = result;\n          callback(false, results);\n        }\n    });\n  };\n\n  this._getToken(function(err,token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(value,token,callback);\n    }\n  });\n};\n\nAGOLGeocoder.prototype._formatResult = function(result) {\n  if(result.address){\n    return {\n      'latitude' : result.location.y,\n      'longitude' : result.location.x,\n      'country' : result.address.CountryCode,\n      'city' : result.address.City,\n      'state' : result.address.Region,\n      'zipcode' : result.address.Postal,\n      'countryCode' : result.address.CountryCode,\n      'address': result.address.Address,\n      'neighborhood': result.address.Neighborhood,\n      'loc_name': result.address.Loc_name\n    };\n  }\n\n  var country = null;\n  var countryCode = null;\n  var city = null;\n  var state = null;\n  var stateCode = null;\n  var zipcode = null;\n  var streetPreDir = null;\n  var streetType = null;\n  var streetName = null;\n  var streetNumber = null;\n\n  var attributes = result.feature.attributes;\n  for (var property in attributes) {\n    if (attributes.hasOwnProperty(property)) {\n      if(property == 'City') {\n        city = attributes[property];\n      }\n      if(property == 'Postal') {\n        zipcode = attributes[property];\n      }\n      if(property == 'Region') {\n        state = attributes[property];\n      }\n      if(property == 'StPreDir') {\n        streetPreDir = attributes[property];\n      }\n      if(property == 'AddNum') {\n        streetNumber = attributes[property];\n      }\n      if(property == 'StName') {\n        streetName = attributes[property];\n      }\n      if(property == 'StType') {\n        streetType = attributes[property];\n      }\n      if(property == 'Country') {\n        countryCode = attributes[property];\n        country = attributes[property];\n      }\n    }\n  }\n\n  return {\n    'latitude' : result.feature.geometry.y,\n    'longitude' : result.feature.geometry.x,\n    'country' : country,\n    'city' : city,\n    'state' : state,\n    'stateCode' : stateCode,\n    'zipcode' : zipcode,\n    'streetName': streetPreDir + ' ' + streetName + ' ' + streetType,\n    'streetNumber' : streetNumber,\n    'countryCode' : countryCode\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param {function} callback Callback method\n */\nAGOLGeocoder.prototype.reverse = function(query, callback) {\n  var lat = query.lat;\n  var long = query.lon;\n\n  var _this = this;\n\n  var execute = function (lat,long,token,callback) {\n    var params = {\n      'token':token,\n      'f':'json',\n      'location' : long + ',' + lat,\n      'outFields': 'AddrNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._reverseEndpoint, params, function(err, result) {\n      result = JSON.parse(result);\n      if (err) {\n        return callback(err);\n      } else {\n        //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n        if(result.error){\n          callback(result.error,{raw:result});\n          return null;\n        }\n\n        var results = [];\n        results.push(_this._formatResult(result));\n\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  };\n\n  this._getToken(function(err,token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(lat,long,token,callback);\n    }\n  });\n};\n\nmodule.exports = AGOLGeocoder;\n"]},"metadata":{},"sourceType":"script"}