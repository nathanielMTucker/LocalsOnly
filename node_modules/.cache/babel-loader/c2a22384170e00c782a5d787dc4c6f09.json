{"ast":null,"code":"var util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar OpenStreetMapGeocoder = function OpenStreetMapGeocoder(httpAdapter, options) {\n  this.options = ['language', 'email', 'apiKey', 'osmServer'];\n  OpenStreetMapGeocoder.super_.call(this, httpAdapter, options);\n  var osmServer = options && options.osmServer || 'http://nominatim.openstreetmap.org';\n  OpenStreetMapGeocoder.prototype._endpoint = osmServer + '/search';\n  OpenStreetMapGeocoder.prototype._endpoint_reverse = osmServer + '/reverse';\n};\n\nutil.inherits(OpenStreetMapGeocoder, AbstractGeocoder);\nOpenStreetMapGeocoder.prototype._endpoint = 'https://nominatim.openstreetmap.org/search';\nOpenStreetMapGeocoder.prototype._endpoint_reverse = 'https://nominatim.openstreetmap.org/reverse';\n/**\n* Geocode\n* @param <string|object>   value    Value to geocode (Address or parameters, as specified at https://wiki.openstreetmap.org/wiki/Nominatim#Parameters)\n* @param <function> callback Callback method\n*/\n\nOpenStreetMapGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  params.addressdetails = 1;\n\n  if (typeof value == 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n      params[k] = v;\n    }\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      if (result.error) {\n        return callback(new Error(result.error));\n      }\n\n      if (result instanceof Array) {\n        for (var i = 0; i < result.length; i++) {\n          results.push(_this._formatResult(result[i]));\n        }\n      } else {\n        results.push(_this._formatResult(result));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nOpenStreetMapGeocoder.prototype._formatResult = function (result) {\n  var countryCode = result.address.country_code;\n\n  if (countryCode) {\n    countryCode = countryCode.toUpperCase();\n  }\n\n  var latitude = result.lat;\n\n  if (latitude) {\n    latitude = parseFloat(latitude);\n  }\n\n  var longitude = result.lon;\n\n  if (longitude) {\n    longitude = parseFloat(longitude);\n  }\n\n  return {\n    'latitude': latitude,\n    'longitude': longitude,\n    'formattedAddress': result.display_name,\n    'country': result.address.country,\n    'city': result.address.city || result.address.town || result.address.village || result.address.hamlet,\n    'state': result.address.state,\n    'zipcode': result.address.postcode,\n    'streetName': result.address.road || result.address.cycleway,\n    'streetNumber': result.address.house_number,\n    'countryCode': countryCode,\n    'neighbourhood': result.address.neighbourhood || ''\n  };\n};\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>, ...}  lat: Latitude, lon: Longitude, ... see https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* @param <function> callback Callback method\n*/\n\n\nOpenStreetMapGeocoder.prototype._reverse = function (query, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.error) {\n        return callback(new Error(result.error));\n      }\n\n      var results = [];\n\n      if (result instanceof Array) {\n        for (var i = 0; i < result.length; i++) {\n          results.push(_this._formatResult(result[i]));\n        }\n      } else {\n        results.push(_this._formatResult(result));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\n\n\nOpenStreetMapGeocoder.prototype._getCommonParams = function () {\n  var params = {};\n\n  for (var k in this.options) {\n    var v = this.options[k];\n\n    if (!v) {\n      continue;\n    }\n\n    if (k === 'language') {\n      k = 'accept-language';\n    }\n\n    params[k] = v;\n  }\n\n  return params;\n};\n\nOpenStreetMapGeocoder.prototype._forceParams = function (params) {\n  params.format = 'json';\n  params.addressdetails = 1;\n};\n\nmodule.exports = OpenStreetMapGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/openstreetmapgeocoder.js"],"names":["util","require","AbstractGeocoder","OpenStreetMapGeocoder","httpAdapter","options","super_","call","osmServer","prototype","_endpoint","_endpoint_reverse","inherits","_geocode","value","callback","_this","params","_getCommonParams","addressdetails","q","k","v","_forceParams","get","err","result","results","error","Error","Array","i","length","push","_formatResult","raw","countryCode","address","country_code","toUpperCase","latitude","lat","parseFloat","longitude","lon","display_name","country","city","town","village","hamlet","state","postcode","road","cycleway","house_number","neighbourhood","_reverse","query","format","module","exports"],"mappings":"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","sourcesContent":["var util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar OpenStreetMapGeocoder = function OpenStreetMapGeocoder(httpAdapter, options) {\n    this.options = ['language','email','apiKey', 'osmServer'];\n\n    OpenStreetMapGeocoder.super_.call(this, httpAdapter, options);\n    var osmServer = (options && options.osmServer) || 'http://nominatim.openstreetmap.org';\n    OpenStreetMapGeocoder.prototype._endpoint = osmServer + '/search';\n    OpenStreetMapGeocoder.prototype._endpoint_reverse = osmServer + '/reverse';\n};\n\nutil.inherits(OpenStreetMapGeocoder, AbstractGeocoder);\n\nOpenStreetMapGeocoder.prototype._endpoint = 'https://nominatim.openstreetmap.org/search';\n\nOpenStreetMapGeocoder.prototype._endpoint_reverse = 'https://nominatim.openstreetmap.org/reverse';\n\n/**\n* Geocode\n* @param <string|object>   value    Value to geocode (Address or parameters, as specified at https://wiki.openstreetmap.org/wiki/Nominatim#Parameters)\n* @param <function> callback Callback method\n*/\nOpenStreetMapGeocoder.prototype._geocode = function(value, callback) {\n    var _this = this;\n\n    var params = this._getCommonParams();\n    params.addressdetails = 1;\n    if (typeof value == 'string') {\n      params.q = value;\n    } else {\n      for (var k in value) {\n        var v = value[k];\n        params[k] = v;\n      }\n    }\n    this._forceParams(params);\n\n    this.httpAdapter.get(this._endpoint , params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n            var results = [];\n\n            if(result.error) {\n              return callback(new Error(result.error));\n            }\n\n            if (result instanceof Array) {\n              for (var i = 0; i < result.length; i++) {\n                results.push(_this._formatResult(result[i]));\n              }\n            } else {\n              results.push(_this._formatResult(result));\n            }\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nOpenStreetMapGeocoder.prototype._formatResult = function(result) {\n\n    var countryCode = result.address.country_code;\n    if (countryCode) {\n        countryCode = countryCode.toUpperCase();\n    }\n\n    var latitude = result.lat;\n    if (latitude) {\n      latitude = parseFloat(latitude);\n    }\n\n    var longitude = result.lon;\n    if (longitude) {\n      longitude = parseFloat(longitude);\n    }\n\n    return {\n        'latitude' : latitude,\n        'longitude' : longitude,\n        'formattedAddress': result.display_name,\n        'country' : result.address.country,\n        'city' : result.address.city || result.address.town || result.address.village || result.address.hamlet,\n        'state': result.address.state,\n        'zipcode' : result.address.postcode,\n        'streetName': result.address.road || result.address.cycleway,\n        'streetNumber' : result.address.house_number,\n        'countryCode' : countryCode,\n        'neighbourhood': result.address.neighbourhood || ''\n    };\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>, ...}  lat: Latitude, lon: Longitude, ... see https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* @param <function> callback Callback method\n*/\nOpenStreetMapGeocoder.prototype._reverse = function(query, callback) {\n\n    var _this = this;\n\n    var params = this._getCommonParams();\n    for (var k in query) {\n      var v = query[k];\n      params[k] = v;\n    }\n    this._forceParams(params);\n\n    this.httpAdapter.get(this._endpoint_reverse , params, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n          if(result.error) {\n            return callback(new Error(result.error));\n          }\n\n          var results = [];\n          if (result instanceof Array) {\n            for (var i = 0; i < result.length; i++) {\n              results.push(_this._formatResult(result[i]));\n            }\n          } else {\n            results.push(_this._formatResult(result));\n          }\n\n          results.raw = result;\n          callback(false, results);\n        }\n    });\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nOpenStreetMapGeocoder.prototype._getCommonParams = function(){\n    var params = {};\n\n    for (var k in this.options) {\n      var v = this.options[k];\n      if (!v) {\n        continue;\n      }\n      if (k === 'language') {\n        k = 'accept-language';\n      }\n      params[k] = v;\n    }\n\n    return params;\n};\n\nOpenStreetMapGeocoder.prototype._forceParams = function(params){\n    params.format = 'json';\n    params.addressdetails = 1;\n};\n\nmodule.exports = OpenStreetMapGeocoder;\n"]},"metadata":{},"sourceType":"script"}