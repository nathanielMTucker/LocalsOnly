{"ast":null,"code":"var util = require('util');\n\nvar AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\n\n\nvar TomTomGeocoder = function TomTomGeocoder(httpAdapter, options) {\n  TomTomGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n    throw new Error('You must specify an apiKey');\n  }\n};\n\nutil.inherits(TomTomGeocoder, AbstractGeocoder); // TomTom geocoding API endpoint\n\nTomTomGeocoder.prototype._endpoint = 'https://api.tomtom.com/search/2/geocode';\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\n\nTomTomGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = {\n    key: this.options.apiKey\n  };\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  var url = this._endpoint + '/' + encodeURIComponent(value) + '.json';\n  this.httpAdapter.get(url, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for (var i = 0; i < result.results.length; i++) {\n        results.push(_this._formatResult(result.results[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTomTomGeocoder.prototype._formatResult = function (result) {\n  return {\n    'latitude': result.position.lat,\n    'longitude': result.position.lon,\n    'country': result.address.country,\n    'city': result.address.localName,\n    'state': result.address.countrySubdivision,\n    'zipcode': result.address.postcode,\n    'streetName': result.address.streetName,\n    'streetNumber': result.address.streetNumber,\n    'countryCode': result.address.countryCode\n  };\n};\n\nmodule.exports = TomTomGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/tomtomgeocoder.js"],"names":["util","require","AbstractGeocoder","TomTomGeocoder","httpAdapter","options","super_","call","apiKey","Error","inherits","prototype","_endpoint","_geocode","value","callback","_this","params","key","language","url","encodeURIComponent","get","err","result","results","i","length","push","_formatResult","raw","position","lat","lon","address","country","localName","countrySubdivision","postcode","streetName","streetNumber","countryCode","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;AAKA,IAAIE,cAAc,GAAG,SAASA,cAAT,CAAwBC,WAAxB,EAAqCC,OAArC,EAA8C;AAEjEF,EAAAA,cAAc,CAACG,MAAf,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiCH,WAAjC,EAA8CC,OAA9C;;AAEA,MAAI,CAAC,KAAKA,OAAL,CAAaG,MAAd,IAAwB,KAAKH,OAAL,CAAaG,MAAb,IAAuB,WAAnD,EAAgE;AAC9D,UAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,CAPD;;AASAT,IAAI,CAACU,QAAL,CAAcP,cAAd,EAA8BD,gBAA9B,E,CAEA;;AACAC,cAAc,CAACQ,SAAf,CAAyBC,SAAzB,GAAqC,yCAArC;AAEA;;;;;;AAKAT,cAAc,CAACQ,SAAf,CAAyBE,QAAzB,GAAoC,UAASC,KAAT,EAAgBC,QAAhB,EAA0B;AAE5D,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIC,MAAM,GAAG;AACXC,IAAAA,GAAG,EAAK,KAAKb,OAAL,CAAaG;AADV,GAAb;;AAIA,MAAI,KAAKH,OAAL,CAAac,QAAjB,EAA2B;AACzBF,IAAAA,MAAM,CAACE,QAAP,GAAkB,KAAKd,OAAL,CAAac,QAA/B;AACD;;AAED,MAAIC,GAAG,GAAG,KAAKR,SAAL,GAAiB,GAAjB,GAAuBS,kBAAkB,CAACP,KAAD,CAAzC,GAAmD,OAA7D;AAEA,OAAKV,WAAL,CAAiBkB,GAAjB,CAAqBF,GAArB,EAA0BH,MAA1B,EAAkC,UAASM,GAAT,EAAcC,MAAd,EAAsB;AACtD,QAAID,GAAJ,EAAS;AACP,aAAOR,QAAQ,CAACQ,GAAD,CAAf;AACD,KAFD,MAEO;AACL,UAAIE,OAAO,GAAG,EAAd;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACC,OAAP,CAAeE,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CD,QAAAA,OAAO,CAACG,IAAR,CAAaZ,KAAK,CAACa,aAAN,CAAoBL,MAAM,CAACC,OAAP,CAAeC,CAAf,CAApB,CAAb;AACH;;AAEDD,MAAAA,OAAO,CAACK,GAAR,GAAcN,MAAd;AACAT,MAAAA,QAAQ,CAAC,KAAD,EAAQU,OAAR,CAAR;AACD;AACF,GAbD;AAcD,CA5BD;;AA8BAtB,cAAc,CAACQ,SAAf,CAAyBkB,aAAzB,GAAyC,UAASL,MAAT,EAAiB;AACxD,SAAO;AACL,gBAAaA,MAAM,CAACO,QAAP,CAAgBC,GADxB;AAEL,iBAAcR,MAAM,CAACO,QAAP,CAAgBE,GAFzB;AAGL,eAAYT,MAAM,CAACU,OAAP,CAAeC,OAHtB;AAIL,YAASX,MAAM,CAACU,OAAP,CAAeE,SAJnB;AAKL,aAAUZ,MAAM,CAACU,OAAP,CAAeG,kBALpB;AAML,eAAYb,MAAM,CAACU,OAAP,CAAeI,QANtB;AAOL,kBAAcd,MAAM,CAACU,OAAP,CAAeK,UAPxB;AAQL,oBAAiBf,MAAM,CAACU,OAAP,CAAeM,YAR3B;AASL,mBAAgBhB,MAAM,CAACU,OAAP,CAAeO;AAT1B,GAAP;AAWD,CAZD;;AAcAC,MAAM,CAACC,OAAP,GAAiBxC,cAAjB","sourcesContent":["var util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\nvar TomTomGeocoder = function TomTomGeocoder(httpAdapter, options) {\n\n  TomTomGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n    throw new Error('You must specify an apiKey');\n  }\n};\n\nutil.inherits(TomTomGeocoder, AbstractGeocoder);\n\n// TomTom geocoding API endpoint\nTomTomGeocoder.prototype._endpoint = 'https://api.tomtom.com/search/2/geocode';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\nTomTomGeocoder.prototype._geocode = function(value, callback) {\n\n  var _this = this;\n\n  var params = {\n    key   : this.options.apiKey\n  };\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  var url = this._endpoint + '/' + encodeURIComponent(value) + '.json';\n\n  this.httpAdapter.get(url, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for(var i = 0; i < result.results.length; i++) {\n          results.push(_this._formatResult(result.results[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTomTomGeocoder.prototype._formatResult = function(result) {\n  return {\n    'latitude' : result.position.lat,\n    'longitude' : result.position.lon,\n    'country' : result.address.country,\n    'city' : result.address.localName,\n    'state' : result.address.countrySubdivision,\n    'zipcode' : result.address.postcode,\n    'streetName': result.address.streetName,\n    'streetNumber' : result.address.streetNumber,\n    'countryCode' : result.address.countryCode\n  };\n};\n\nmodule.exports = TomTomGeocoder;\n"]},"metadata":{},"sourceType":"script"}