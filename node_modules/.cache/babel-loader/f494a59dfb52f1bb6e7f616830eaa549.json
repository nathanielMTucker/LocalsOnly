{"ast":null,"code":"'use strict';\n\nconst HttpError = require('../error/httperror.js');\n\nconst nodeFetch = require('node-fetch');\n\nconst querystring = require('querystring');\n\nconst BPromise = require('bluebird');\n\nclass FetchAdapter {\n  constructor(options = {}) {\n    this.fetch = options.fetch || nodeFetch;\n    this.options = { ...options\n    };\n    delete this.options.fetch;\n  }\n\n  supportsHttps() {\n    return true;\n  }\n\n  get(url, params, callback) {\n    var options = {\n      headers: {\n        'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n      }\n    };\n\n    if (this.options) {\n      for (var k in this.options) {\n        var v = this.options[k];\n\n        if (!v) {\n          continue;\n        }\n\n        options[k] = v;\n      }\n    }\n\n    return BPromise.resolve().then(async () => {\n      const res = await this.fetch(url + '?' + querystring.encode(params), options);\n      return res.json();\n    }).catch(function (error) {\n      var _error = error.cause ? error.cause : error;\n\n      throw new HttpError(_error.message, {\n        code: _error.code\n      });\n    }).asCallback(callback);\n  }\n\n}\n\nmodule.exports = FetchAdapter;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/httpadapter/fetchadapter.js"],"names":["HttpError","require","nodeFetch","querystring","BPromise","FetchAdapter","constructor","options","fetch","supportsHttps","get","url","params","callback","headers","k","v","resolve","then","res","encode","json","catch","error","_error","cause","message","code","asCallback","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMI,YAAN,CAAmB;AACjBC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,SAAKC,KAAL,GAAaD,OAAO,CAACC,KAAR,IAAiBN,SAA9B;AACA,SAAKK,OAAL,GAAe,EAAE,GAAGA;AAAL,KAAf;AACA,WAAO,KAAKA,OAAL,CAAaC,KAApB;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,WAAO,IAAP;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,QAAd,EAAwB;AACzB,QAAIN,OAAO,GAAG;AACZO,MAAAA,OAAO,EAAE;AACP,sBACE;AAFK;AADG,KAAd;;AAOA,QAAI,KAAKP,OAAT,EAAkB;AAChB,WAAK,IAAIQ,CAAT,IAAc,KAAKR,OAAnB,EAA4B;AAC1B,YAAIS,CAAC,GAAG,KAAKT,OAAL,CAAaQ,CAAb,CAAR;;AACA,YAAI,CAACC,CAAL,EAAQ;AACN;AACD;;AACDT,QAAAA,OAAO,CAACQ,CAAD,CAAP,GAAaC,CAAb;AACD;AACF;;AACD,WAAOZ,QAAQ,CAACa,OAAT,GACJC,IADI,CACC,YAAY;AAChB,YAAMC,GAAG,GAAG,MAAM,KAAKX,KAAL,CAChBG,GAAG,GAAG,GAAN,GAAYR,WAAW,CAACiB,MAAZ,CAAmBR,MAAnB,CADI,EAEhBL,OAFgB,CAAlB;AAKA,aAAOY,GAAG,CAACE,IAAJ,EAAP;AACD,KARI,EASJC,KATI,CASE,UAASC,KAAT,EAAgB;AACrB,UAAIC,MAAM,GAAGD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAApB,GAA4BF,KAAzC;;AACA,YAAM,IAAIvB,SAAJ,CAAcwB,MAAM,CAACE,OAArB,EAA8B;AAClCC,QAAAA,IAAI,EAAEH,MAAM,CAACG;AADqB,OAA9B,CAAN;AAGD,KAdI,EAeJC,UAfI,CAeOf,QAfP,CAAP;AAgBD;;AA5CgB;;AA+CnBgB,MAAM,CAACC,OAAP,GAAiBzB,YAAjB","sourcesContent":["'use strict';\n\nconst HttpError = require('../error/httperror.js');\nconst nodeFetch = require('node-fetch');\nconst querystring = require('querystring');\nconst BPromise = require('bluebird');\n\nclass FetchAdapter {\n  constructor(options = {}) {\n    this.fetch = options.fetch || nodeFetch;\n    this.options = { ...options };\n    delete this.options.fetch;\n  }\n\n  supportsHttps() {\n    return true;\n  }\n\n  get(url, params, callback) {\n    var options = {\n      headers: {\n        'user-agent':\n          'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n      }\n    };\n\n    if (this.options) {\n      for (var k in this.options) {\n        var v = this.options[k];\n        if (!v) {\n          continue;\n        }\n        options[k] = v;\n      }\n    }\n    return BPromise.resolve()\n      .then(async () => {\n        const res = await this.fetch(\n          url + '?' + querystring.encode(params),\n          options\n        );\n\n        return res.json();\n      })\n      .catch(function(error) {\n        var _error = error.cause ? error.cause : error;\n        throw new HttpError(_error.message, {\n          code: _error.code\n        });\n      })\n      .asCallback(callback);\n  }\n}\n\nmodule.exports = FetchAdapter;\n"]},"metadata":{},"sourceType":"script"}