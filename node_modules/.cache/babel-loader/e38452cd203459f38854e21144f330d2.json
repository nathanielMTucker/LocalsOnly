{"ast":null,"code":"'use strict';\n\nvar net = require('net');\n\nvar ValueError = require('../error/valueerror.js');\n\nfunction formatGeocoderName(name) {\n  return name.toLowerCase().replace(/geocoder$/, '');\n}\n/**\n * AbstractGeocoder Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options\n */\n\n\nvar AbstractGeocoder = function (httpAdapter, options) {\n  if (!this.constructor.name) {\n    throw new Error('The Constructor must be named');\n  }\n\n  this.name = formatGeocoderName(this.constructor.name);\n\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error(this.constructor.name + ' need an httpAdapter');\n  }\n\n  this.httpAdapter = httpAdapter;\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (this.options) {\n    this.options.forEach(function (option) {\n      if (!options[option] || options[option] == 'undefined') {\n        options[option] = null;\n      }\n    });\n  }\n\n  this.options = options;\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nAbstractGeocoder.prototype.reverse = function (query, callback) {\n  if (typeof this._reverse != 'function') {\n    throw new Error(this.constructor.name + ' no support reverse geocoding');\n  }\n\n  return this._reverse(query, callback);\n};\n/**\n * Geocode\n * @param <string>   value    Value to geocode\n * @param <function> callback Callback method\n */\n\n\nAbstractGeocoder.prototype.geocode = function (value, callback) {\n  var address = value;\n\n  if (typeof value === 'object') {\n    address = value.address;\n  }\n\n  if (typeof this._geocode != 'function') {\n    throw new ValueError(this.constructor.name + ' does not support geocoding');\n  }\n\n  if (net.isIPv4(address) && (!this.supportIPv4 || this.supportIPv4 == 'undefined')) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding IPv4');\n  }\n\n  if (net.isIPv6(address) && (!this.supportIPv6 || this.supportIPv6 == 'undefined')) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding IPv6');\n  }\n\n  if (this.supportAddress === false && !net.isIPv4(address) && !net.isIPv6(address)) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding address');\n  }\n\n  return this._geocode(value, callback);\n};\n\nmodule.exports = AbstractGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/abstractgeocoder.js"],"names":["net","require","ValueError","formatGeocoderName","name","toLowerCase","replace","AbstractGeocoder","httpAdapter","options","constructor","Error","forEach","option","prototype","reverse","query","callback","_reverse","geocode","value","address","_geocode","isIPv4","supportIPv4","isIPv6","supportIPv6","supportAddress","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar net = require('net');\nvar ValueError = require('../error/valueerror.js');\n\nfunction formatGeocoderName(name) {\n  return name.toLowerCase().replace(/geocoder$/, '');\n}\n\n/**\n * AbstractGeocoder Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options\n */\nvar AbstractGeocoder = function(httpAdapter, options) {\n  if (!this.constructor.name) {\n    throw new Error('The Constructor must be named');\n  }\n\n  this.name = formatGeocoderName(this.constructor.name);\n\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error(this.constructor.name + ' need an httpAdapter');\n  }\n  this.httpAdapter = httpAdapter;\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (this.options) {\n    this.options.forEach(function(option) {\n      if (!options[option] || options[option] == 'undefined') {\n        options[option] = null;\n      }\n    });\n  }\n\n  this.options = options;\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nAbstractGeocoder.prototype.reverse = function(query, callback) {\n  if (typeof this._reverse != 'function') {\n    throw new Error(this.constructor.name + ' no support reverse geocoding');\n  }\n\n  return this._reverse(query, callback);\n};\n\n/**\n * Geocode\n * @param <string>   value    Value to geocode\n * @param <function> callback Callback method\n */\nAbstractGeocoder.prototype.geocode = function(value, callback) {\n  var address = value;\n  if (typeof value === 'object') {\n    address = value.address;\n  }\n  if (typeof this._geocode != 'function') {\n    throw new ValueError(this.constructor.name + ' does not support geocoding');\n  }\n  if (\n    net.isIPv4(address) &&\n    (!this.supportIPv4 || this.supportIPv4 == 'undefined')\n  ) {\n    throw new ValueError(\n      this.constructor.name + ' does not support geocoding IPv4'\n    );\n  }\n\n  if (\n    net.isIPv6(address) &&\n    (!this.supportIPv6 || this.supportIPv6 == 'undefined')\n  ) {\n    throw new ValueError(\n      this.constructor.name + ' does not support geocoding IPv6'\n    );\n  }\n\n  if (\n    this.supportAddress === false &&\n    !net.isIPv4(address) && !net.isIPv6(address)\n  ) {\n    throw new ValueError(\n      this.constructor.name + ' does not support geocoding address'\n    );\n  }\n\n  return this._geocode(value, callback);\n};\n\nmodule.exports = AbstractGeocoder;\n"]},"metadata":{},"sourceType":"script"}