{"ast":null,"code":"'use strict';\n\nvar HttpError = require('../error/httperror.js');\n\nvar querystring = require('querystring');\n/**\n* HttpAdapter\n* @param <object>   http      an optional http instance to use\n* @param <object>   options   additional options to set on the request\n*/\n\n\nvar HttpAdapter = function (http, options) {\n  if (!http || http === 'undefined') {\n    http = require('http');\n  }\n\n  this.url = require('url');\n  this.http = http;\n  this.options = options;\n};\n/**\n* Geocode\n* @param <string>   url      Webservice url\n* @param <array>    params   array of query string parameters\n* @param <function> callback Callback method\n*/\n\n\nHttpAdapter.prototype.get = function (url, params, callback) {\n  var urlParsed = this.url.parse(url);\n  var options = {\n    host: urlParsed.hostname,\n    path: urlParsed.path + '?' + querystring.stringify(params),\n    headers: {\n      'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n    }\n  };\n\n  if (urlParsed.port) {\n    options.port = urlParsed.port;\n  }\n\n  if (this.options) {\n    for (var k in this.options) {\n      var v = this.options[k];\n\n      if (!v) {\n        continue;\n      }\n\n      options[k] = v;\n    }\n  }\n\n  var request = this.http.request(options, function (response) {\n    var str = '';\n    var contentType = response.headers['content-type'];\n    response.on('data', function (chunk) {\n      str += chunk;\n    }); //the whole response has been recieved, so we just print it out here\n\n    response.on('end', function () {\n      if (response.statusCode !== 200) {\n        return callback(new Error('Response status code is ' + response.statusCode), null);\n      }\n\n      if (contentType !== undefined && contentType.indexOf('application/json') >= 0) {\n        callback(false, JSON.parse(str));\n      } else {\n        callback(false, str);\n      }\n    });\n  });\n\n  if (typeof options.timeout !== 'undefined') {\n    request.setTimeout(options.timeout);\n  }\n\n  var onError = function (err) {\n    var error = err instanceof HttpError ? err : new HttpError(err.message, {\n      code: err.code\n    });\n    callback(error, null);\n  };\n\n  request.on('error', onError);\n  request.on('timeout', function () {\n    onError(new HttpError('connect ETIMEDOUT', {\n      code: 'ETIMEDOUT',\n      errno: 'ETIMEDOUT',\n      syscall: 'connect'\n    }));\n  });\n  request.end();\n};\n\nHttpAdapter.prototype.supportsHttps = function () {\n  return false;\n};\n\nmodule.exports = HttpAdapter;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/httpadapter/httpadapter.js"],"names":["HttpError","require","querystring","HttpAdapter","http","options","url","prototype","get","params","callback","urlParsed","parse","host","hostname","path","stringify","headers","port","k","v","request","response","str","contentType","on","chunk","statusCode","Error","undefined","indexOf","JSON","timeout","setTimeout","onError","err","error","message","code","errno","syscall","end","supportsHttps","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar HttpError = require('../error/httperror.js');\nvar querystring = require('querystring');\n\n/**\n* HttpAdapter\n* @param <object>   http      an optional http instance to use\n* @param <object>   options   additional options to set on the request\n*/\nvar HttpAdapter = function(http, options) {\n  if (!http || http === 'undefined') {\n    http = require('http');\n  }\n\n  this.url = require('url');\n  this.http = http;\n  this.options = options;\n};\n\n/**\n* Geocode\n* @param <string>   url      Webservice url\n* @param <array>    params   array of query string parameters\n* @param <function> callback Callback method\n*/\nHttpAdapter.prototype.get = function(url, params, callback) {\n\n  var urlParsed = this.url.parse(url);\n  var options = {\n    host: urlParsed.hostname,\n    path: urlParsed.path + '?' + querystring.stringify(params),\n    headers: {\n      'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n    }\n  };\n  if(urlParsed.port){\n    options.port = urlParsed.port; \n  }\n\n  if (this.options) {\n    for (var k in this.options) {\n      var v = this.options[k];\n      if (!v) {\n        continue;\n      }\n      options[k] = v;\n    }\n  }\n\n  var request = this.http.request(options, function(response) {\n    var str = '';\n    var contentType = response.headers['content-type'];\n    response.on('data', function(chunk) {\n      str += chunk;\n    });\n\n    //the whole response has been recieved, so we just print it out here\n    response.on('end', function() {\n      if (response.statusCode !== 200) {\n        return callback(new Error('Response status code is ' + response.statusCode), null);\n      }\n\n      if (contentType !== undefined && contentType.indexOf('application/json') >= 0) {\n        callback(false, JSON.parse(str));\n      } else {\n        callback(false, str);\n      }\n\n    });\n  });\n\n  if(typeof options.timeout !== 'undefined') {\n    request.setTimeout(options.timeout);\n  }\n\n  var onError = function(err) {\n    var error = err instanceof HttpError ? err : new HttpError(err.message, {\n      code: err.code\n    });\n    callback(error, null);\n  };\n\n  request.on('error', onError);\n\n  request.on('timeout', function() {\n    onError(new HttpError('connect ETIMEDOUT', {\n      code: 'ETIMEDOUT',\n      errno: 'ETIMEDOUT',\n      syscall: 'connect'\n    }));\n  });\n\n  request.end();\n};\n\nHttpAdapter.prototype.supportsHttps = function() {\n  return false;\n};\n\nmodule.exports = HttpAdapter;\n"]},"metadata":{},"sourceType":"script"}