{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nvar url = require('url');\n\nvar util = require('util');\n\nvar AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey, region, excludePartialMatches)\n */\n\n\nvar GoogleGeocoder = function GoogleGeocoder(httpAdapter, options) {\n  this.options = ['language', 'apiKey', 'clientId', 'region', 'excludePartialMatches', 'channel'];\n  GoogleGeocoder.super_.call(this, httpAdapter, options);\n\n  if (this.options.clientId && !this.options.apiKey) {\n    throw new Error('You must specify a apiKey (privateKey)');\n  }\n\n  if (this.options.apiKey && !httpAdapter.supportsHttps()) {\n    throw new Error('You must use https http adapter');\n  }\n};\n\nutil.inherits(GoogleGeocoder, AbstractGeocoder); // Google geocoding API endpoint\n\nGoogleGeocoder.prototype._endpoint = 'https://maps.googleapis.com/maps/api/geocode/json';\n/**\n * Geocode\n * @param <string>   value    Value ton geocode (Address)\n * @param <function> callback Callback method\n */\n\nGoogleGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._prepareQueryString();\n\n  if (value.address) {\n    var components = '';\n\n    if (value.country) {\n      components = 'country:' + value.country;\n    }\n\n    if (value.zipcode) {\n      if (components) {\n        components += '|';\n      }\n\n      components += 'postal_code:' + value.zipcode;\n    }\n\n    params.components = this._encodeSpecialChars(components);\n    params.address = this._encodeSpecialChars(value.address);\n  } else if (value.googlePlaceId) {\n    params.place_id = value.googlePlaceId;\n  } else {\n    params.address = this._encodeSpecialChars(value);\n  }\n\n  if (value.language) {\n    params.language = value.language;\n  }\n\n  if (value.region) {\n    params.region = value.region;\n  }\n\n  var excludePartialMatches = params.excludePartialMatches;\n  delete params.excludePartialMatches;\n\n  this._signedRequest(this._endpoint, params);\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = []; // status can be \"OK\", \"ZERO_RESULTS\", \"OVER_QUERY_LIMIT\", \"REQUEST_DENIED\", \"INVALID_REQUEST\", or \"UNKNOWN_ERROR\"\n      // error_message may or may not be present\n\n      if (result.status === 'ZERO_RESULTS') {\n        results.raw = result;\n        return callback(false, results);\n      }\n\n      if (result.status !== 'OK') {\n        return callback(new Error('Status is ' + result.status + '.' + (result.error_message ? ' ' + result.error_message : '')), {\n          raw: result\n        });\n      }\n\n      for (var i = 0; i < result.results.length; i++) {\n        var currentResult = result.results[i];\n\n        if (excludePartialMatches && excludePartialMatches === true && typeof currentResult.partial_match !== 'undefined' && currentResult.partial_match === true) {\n          continue;\n        }\n\n        results.push(_this._formatResult(currentResult));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nGoogleGeocoder.prototype._prepareQueryString = function () {\n  var params = {\n    'sensor': false\n  };\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  if (this.options.region) {\n    params.region = this.options.region;\n  }\n\n  if (this.options.clientId) {\n    params.client = this.options.clientId;\n  } else if (this.options.apiKey) {\n    params.key = this.options.apiKey;\n  }\n\n  if (this.options.channel) {\n    params.channel = this.options.channel;\n  }\n\n  if (this.options.excludePartialMatches && this.options.excludePartialMatches === true) {\n    params.excludePartialMatches = true;\n  }\n\n  return params;\n};\n\nGoogleGeocoder.prototype._signedRequest = function (endpoint, params) {\n  if (this.options.clientId) {\n    var request = url.parse(endpoint);\n    var fullRequestPath = request.path + url.format({\n      query: params\n    });\n    var decodedKey = new Buffer(this.options.apiKey.replace('-', '+').replace('_', '/'), 'base64');\n    var hmac = crypto.createHmac('sha1', decodedKey);\n    hmac.update(fullRequestPath);\n    var signature = hmac.digest('base64');\n    signature = signature.replace(/\\+/g, '-').replace(/\\//g, '_');\n    params.signature = signature;\n  }\n\n  return params;\n};\n\nGoogleGeocoder.prototype._formatResult = function (result) {\n  var googleConfidenceLookup = {\n    ROOFTOP: 1,\n    RANGE_INTERPOLATED: 0.9,\n    GEOMETRIC_CENTER: 0.7,\n    APPROXIMATE: 0.5\n  };\n  var extractedObj = {\n    formattedAddress: result.formatted_address || null,\n    latitude: result.geometry.location.lat,\n    longitude: result.geometry.location.lng,\n    extra: {\n      googlePlaceId: result.place_id || null,\n      confidence: googleConfidenceLookup[result.geometry.location_type] || 0,\n      premise: null,\n      subpremise: null,\n      neighborhood: null,\n      establishment: null\n    },\n    administrativeLevels: {}\n  };\n\n  for (var i = 0; i < result.address_components.length; i++) {\n    for (var x = 0; x < result.address_components[i].types.length; x++) {\n      var addressType = result.address_components[i].types[x];\n\n      switch (addressType) {\n        //Country\n        case 'country':\n          extractedObj.country = result.address_components[i].long_name;\n          extractedObj.countryCode = result.address_components[i].short_name;\n          break;\n        //Administrative Level 1\n\n        case 'administrative_area_level_1':\n          extractedObj.administrativeLevels.level1long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level1short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 2\n\n        case 'administrative_area_level_2':\n          extractedObj.administrativeLevels.level2long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level2short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 3\n\n        case 'administrative_area_level_3':\n          extractedObj.administrativeLevels.level3long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level3short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 4\n\n        case 'administrative_area_level_4':\n          extractedObj.administrativeLevels.level4long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level4short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 5\n\n        case 'administrative_area_level_5':\n          extractedObj.administrativeLevels.level5long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level5short = result.address_components[i].short_name;\n          break;\n        // City\n\n        case 'locality':\n        case 'postal_town':\n          extractedObj.city = result.address_components[i].long_name;\n          break;\n        // Address\n\n        case 'postal_code':\n          extractedObj.zipcode = result.address_components[i].long_name;\n          break;\n\n        case 'route':\n          extractedObj.streetName = result.address_components[i].long_name;\n          break;\n\n        case 'street_number':\n          extractedObj.streetNumber = result.address_components[i].long_name;\n          break;\n\n        case 'premise':\n          extractedObj.extra.premise = result.address_components[i].long_name;\n          break;\n\n        case 'subpremise':\n          extractedObj.extra.subpremise = result.address_components[i].long_name;\n          break;\n\n        case 'establishment':\n          extractedObj.extra.establishment = result.address_components[i].long_name;\n          break;\n\n        case 'sublocality_level_1':\n        case 'political':\n        case 'sublocality':\n        case 'neighborhood':\n          if (!extractedObj.extra.neighborhood) {\n            extractedObj.extra.neighborhood = result.address_components[i].long_name;\n          }\n\n          break;\n      }\n    }\n  }\n\n  return extractedObj;\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nGoogleGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  var params = this._prepareQueryString();\n\n  params.latlng = lat + ',' + lng;\n\n  if (query.language) {\n    params.language = query.language;\n  }\n\n  if (query.result_type) {\n    params.result_type = query.result_type;\n  }\n\n  if (query.location_type) {\n    params.location_type = query.location_type;\n  }\n\n  this._signedRequest(this._endpoint, params);\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      // status can be \"OK\", \"ZERO_RESULTS\", \"OVER_QUERY_LIMIT\", \"REQUEST_DENIED\", \"INVALID_REQUEST\", or \"UNKNOWN_ERROR\"\n      // error_message may or may not be present\n      if (result.status !== 'OK') {\n        return callback(new Error('Status is ' + result.status + '.' + (result.error_message ? ' ' + result.error_message : '')), {\n          raw: result\n        });\n      }\n\n      var results = [];\n\n      if (result.results.length > 0) {\n        results.push(_this._formatResult(result.results[0]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nGoogleGeocoder.prototype._encodeSpecialChars = function (value) {\n  if (typeof value === 'string') {\n    return value.replace(/\\u001a/g, ' ');\n  }\n\n  return value;\n};\n\nmodule.exports = GoogleGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/googlegeocoder.js"],"names":["crypto","require","url","util","AbstractGeocoder","GoogleGeocoder","httpAdapter","options","super_","call","clientId","apiKey","Error","supportsHttps","inherits","prototype","_endpoint","_geocode","value","callback","_this","params","_prepareQueryString","address","components","country","zipcode","_encodeSpecialChars","googlePlaceId","place_id","language","region","excludePartialMatches","_signedRequest","get","err","result","results","status","raw","error_message","i","length","currentResult","partial_match","push","_formatResult","client","key","channel","endpoint","request","parse","fullRequestPath","path","format","query","decodedKey","Buffer","replace","hmac","createHmac","update","signature","digest","googleConfidenceLookup","ROOFTOP","RANGE_INTERPOLATED","GEOMETRIC_CENTER","APPROXIMATE","extractedObj","formattedAddress","formatted_address","latitude","geometry","location","lat","longitude","lng","extra","confidence","location_type","premise","subpremise","neighborhood","establishment","administrativeLevels","address_components","x","types","addressType","long_name","countryCode","short_name","level1long","level1short","level2long","level2short","level3long","level3short","level4long","level4short","level5long","level5short","city","streetName","streetNumber","_reverse","lon","latlng","result_type","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar crypto = require('crypto');\nvar url = require('url');\nvar util = require('util');\nvar AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey, region, excludePartialMatches)\n */\nvar GoogleGeocoder = function GoogleGeocoder(httpAdapter, options) {\n  this.options = ['language', 'apiKey', 'clientId', 'region', 'excludePartialMatches', 'channel'];\n\n  GoogleGeocoder.super_.call(this, httpAdapter, options);\n\n  if (this.options.clientId && !this.options.apiKey) {\n    throw new Error('You must specify a apiKey (privateKey)');\n  }\n\n  if (this.options.apiKey && !httpAdapter.supportsHttps()) {\n    throw new Error('You must use https http adapter');\n  }\n};\n\nutil.inherits(GoogleGeocoder, AbstractGeocoder);\n\n// Google geocoding API endpoint\nGoogleGeocoder.prototype._endpoint = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n/**\n * Geocode\n * @param <string>   value    Value ton geocode (Address)\n * @param <function> callback Callback method\n */\nGoogleGeocoder.prototype._geocode = function (value, callback) {\n\n  var _this = this;\n  var params = this._prepareQueryString();\n\n  if (value.address) {\n    var components = '';\n\n    if (value.country) {\n      components = 'country:' + value.country;\n    }\n\n    if (value.zipcode) {\n      if (components) {\n        components += '|';\n      }\n      components += 'postal_code:' + value.zipcode;\n    }\n\n    params.components = this._encodeSpecialChars(components);\n    params.address = this._encodeSpecialChars(value.address);\n  } else if (value.googlePlaceId) {\n    params.place_id = value.googlePlaceId;\n  } else {\n    params.address = this._encodeSpecialChars(value);\n  }\n\n  if (value.language) {\n    params.language = value.language;\n  }\n\n  if (value.region) {\n    params.region = value.region;\n  }\n\n  var excludePartialMatches = params.excludePartialMatches;\n  delete params.excludePartialMatches;\n\n  this._signedRequest(this._endpoint, params);\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      // status can be \"OK\", \"ZERO_RESULTS\", \"OVER_QUERY_LIMIT\", \"REQUEST_DENIED\", \"INVALID_REQUEST\", or \"UNKNOWN_ERROR\"\n      // error_message may or may not be present\n      if (result.status === 'ZERO_RESULTS') {\n        results.raw = result;\n        return callback(false, results);\n      }\n\n      if (result.status !== 'OK') {\n        return callback(new Error('Status is ' + result.status + '.' + (result.error_message ? ' ' + result.error_message : '')), {raw: result});\n      }\n\n      for (var i = 0; i < result.results.length; i++) {\n\n        var currentResult = result.results[i];\n\n        if (excludePartialMatches && excludePartialMatches === true && typeof currentResult.partial_match !== 'undefined' && currentResult.partial_match === true) {\n          continue;\n        }\n\n        results.push(_this._formatResult(currentResult));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n\n  });\n\n};\n\nGoogleGeocoder.prototype._prepareQueryString = function () {\n  var params = {\n    'sensor': false\n  };\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  if (this.options.region) {\n    params.region = this.options.region;\n  }\n\n  if (this.options.clientId) {\n    params.client = this.options.clientId;\n  } else if (this.options.apiKey) {\n    params.key = this.options.apiKey;\n  }\n\n  if (this.options.channel) {\n    params.channel = this.options.channel;\n  }\n\n  if (this.options.excludePartialMatches && this.options.excludePartialMatches === true) {\n    params.excludePartialMatches = true;\n  }\n\n  return params;\n\n};\n\nGoogleGeocoder.prototype._signedRequest = function (endpoint, params) {\n\n  if (this.options.clientId) {\n    var request = url.parse(endpoint);\n    var fullRequestPath = request.path + url.format({query: params});\n\n    var decodedKey = new Buffer(this.options.apiKey.replace('-', '+').replace('_', '/'), 'base64');\n    var hmac = crypto.createHmac('sha1', decodedKey);\n    hmac.update(fullRequestPath);\n    var signature = hmac.digest('base64');\n\n    signature = signature.replace(/\\+/g, '-').replace(/\\//g, '_');\n\n    params.signature = signature;\n  }\n\n  return params;\n};\n\nGoogleGeocoder.prototype._formatResult = function (result) {\n\n  var googleConfidenceLookup = {\n    ROOFTOP: 1,\n    RANGE_INTERPOLATED: 0.9,\n    GEOMETRIC_CENTER: 0.7,\n    APPROXIMATE: 0.5\n  };\n\n  var extractedObj = {\n    formattedAddress: result.formatted_address || null,\n    latitude: result.geometry.location.lat,\n    longitude: result.geometry.location.lng,\n    extra: {\n      googlePlaceId: result.place_id || null,\n      confidence: googleConfidenceLookup[result.geometry.location_type] || 0,\n      premise: null,\n      subpremise: null,\n      neighborhood: null,\n      establishment: null\n    },\n    administrativeLevels: {\n    }\n  };\n\n  for (var i = 0; i < result.address_components.length; i++) {\n    for (var x = 0; x < result.address_components[i].types.length; x++) {\n      var addressType = result.address_components[i].types[x];\n      switch (addressType) {\n        //Country\n        case 'country':\n          extractedObj.country = result.address_components[i].long_name;\n          extractedObj.countryCode = result.address_components[i].short_name;\n          break;\n        //Administrative Level 1\n        case 'administrative_area_level_1':\n          extractedObj.administrativeLevels.level1long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level1short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 2\n        case 'administrative_area_level_2':\n          extractedObj.administrativeLevels.level2long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level2short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 3\n        case 'administrative_area_level_3':\n          extractedObj.administrativeLevels.level3long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level3short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 4\n        case 'administrative_area_level_4':\n          extractedObj.administrativeLevels.level4long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level4short = result.address_components[i].short_name;\n          break;\n        //Administrative Level 5\n        case 'administrative_area_level_5':\n          extractedObj.administrativeLevels.level5long = result.address_components[i].long_name;\n          extractedObj.administrativeLevels.level5short = result.address_components[i].short_name;\n          break;\n        // City\n        case 'locality':\n        case 'postal_town':\n          extractedObj.city = result.address_components[i].long_name;\n          break;\n        // Address\n        case 'postal_code':\n          extractedObj.zipcode = result.address_components[i].long_name;\n          break;\n        case 'route':\n          extractedObj.streetName = result.address_components[i].long_name;\n          break;\n        case 'street_number':\n          extractedObj.streetNumber = result.address_components[i].long_name;\n          break;\n        case 'premise':\n          extractedObj.extra.premise = result.address_components[i].long_name;\n          break;\n        case 'subpremise':\n          extractedObj.extra.subpremise = result.address_components[i].long_name;\n          break;\n        case 'establishment':\n          extractedObj.extra.establishment = result.address_components[i].long_name;\n          break;\n        case 'sublocality_level_1':\n        case 'political':\n        case 'sublocality':\n        case 'neighborhood':\n          if(!extractedObj.extra.neighborhood) {\n            extractedObj.extra.neighborhood = result.address_components[i].long_name;\n          }\n          break;\n      }\n    }\n  }\n  return extractedObj;\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\nGoogleGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n  var params = this._prepareQueryString();\n\n  params.latlng = lat + ',' + lng;\n\n  if (query.language) {\n    params.language = query.language;\n  }\n\n  if (query.result_type) {\n    params.result_type = query.result_type;\n  }\n\n  if (query.location_type) {\n    params.location_type = query.location_type;\n  }\n\n  this._signedRequest(this._endpoint, params);\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      // status can be \"OK\", \"ZERO_RESULTS\", \"OVER_QUERY_LIMIT\", \"REQUEST_DENIED\", \"INVALID_REQUEST\", or \"UNKNOWN_ERROR\"\n      // error_message may or may not be present\n      if (result.status !== 'OK') {\n        return callback(new Error('Status is ' + result.status + '.' + (result.error_message ? ' ' + result.error_message : '')), {raw: result});\n      }\n\n      var results = [];\n\n      if (result.results.length > 0) {\n        results.push(_this._formatResult(result.results[0]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nGoogleGeocoder.prototype._encodeSpecialChars = function(value) {\n  if (typeof value === 'string') {\n    return value.replace(/\\u001a/g, ' ');\n  }\n\n  return value;\n};\n\nmodule.exports = GoogleGeocoder;\n"]},"metadata":{},"sourceType":"script"}