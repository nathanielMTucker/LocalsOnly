{"ast":null,"code":"var util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar FreegeoipGeocoder = function FreegeoipGeocoder(httpAdapter) {\n  this.supportIPv4 = true;\n  this.supportIPv6 = true;\n  this.supportAddress = false;\n  FreegeoipGeocoder.super_.call(this, httpAdapter);\n};\n\nutil.inherits(FreegeoipGeocoder, AbstractGeocoder); // WS endpoint\n\nFreegeoipGeocoder.prototype._endpoint = 'https://freegeoip.net/json/';\n/**\n* Geocode\n* @param <string>   value    Value to geocode (IP only)\n* @param <function> callback Callback method\n*/\n\nFreegeoipGeocoder.prototype._geocode = function (value, callback) {\n  this.httpAdapter.get(this._endpoint + value, {}, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      results.push({\n        'ip': result.ip,\n        'countryCode': result.country_code,\n        'country': result.country_name,\n        'regionCode': result.region_code,\n        'regionName': result.region_name,\n        'city': result.city,\n        'zipcode': result.zip_code,\n        'timeZone': result.time_zone,\n        'latitude': result.latitude,\n        'longitude': result.longitude,\n        'metroCode': result.metro_code\n      });\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = FreegeoipGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/freegeoipgeocoder.js"],"names":["util","require","AbstractGeocoder","FreegeoipGeocoder","httpAdapter","supportIPv4","supportIPv6","supportAddress","super_","call","inherits","prototype","_endpoint","_geocode","value","callback","get","err","result","results","push","ip","country_code","country_name","region_code","region_name","city","zip_code","time_zone","latitude","longitude","metro_code","raw","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAeC,OAAO,CAAC,MAAD,CAA9B;AAAA,IACIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAD9B;AAGA;;;;;AAGA,IAAIE,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,WAA3B,EAAwC;AAC5D,OAAKC,WAAL,GAAqB,IAArB;AACA,OAAKC,WAAL,GAAqB,IAArB;AACA,OAAKC,cAAL,GAAsB,KAAtB;AACAJ,EAAAA,iBAAiB,CAACK,MAAlB,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoCL,WAApC;AACH,CALD;;AAOAJ,IAAI,CAACU,QAAL,CAAcP,iBAAd,EAAiCD,gBAAjC,E,CAEA;;AACAC,iBAAiB,CAACQ,SAAlB,CAA4BC,SAA5B,GAAwC,6BAAxC;AAEA;;;;;;AAKAT,iBAAiB,CAACQ,SAAlB,CAA4BE,QAA5B,GAAuC,UAASC,KAAT,EAAgBC,QAAhB,EAA0B;AAC7D,OAAKX,WAAL,CAAiBY,GAAjB,CAAqB,KAAKJ,SAAL,GAAiBE,KAAtC,EAA8C,EAA9C,EAAmD,UAASG,GAAT,EAAcC,MAAd,EAAsB;AACrE,QAAID,GAAJ,EAAS;AACL,aAAOF,QAAQ,CAACE,GAAD,CAAf;AACH,KAFD,MAEO;AAEH,UAAIE,OAAO,GAAG,EAAd;AAEAA,MAAAA,OAAO,CAACC,IAAR,CAAa;AACT,cAAOF,MAAM,CAACG,EADL;AAET,uBAAgBH,MAAM,CAACI,YAFd;AAGT,mBAAYJ,MAAM,CAACK,YAHV;AAIT,sBAAeL,MAAM,CAACM,WAJb;AAKT,sBAAeN,MAAM,CAACO,WALb;AAMT,gBAASP,MAAM,CAACQ,IANP;AAOT,mBAAYR,MAAM,CAACS,QAPV;AAQT,oBAAaT,MAAM,CAACU,SARX;AAST,oBAAaV,MAAM,CAACW,QATX;AAUT,qBAAcX,MAAM,CAACY,SAVZ;AAWT,qBAAcZ,MAAM,CAACa;AAXZ,OAAb;AAeAZ,MAAAA,OAAO,CAACa,GAAR,GAAcd,MAAd;AACAH,MAAAA,QAAQ,CAAC,KAAD,EAAQI,OAAR,CAAR;AACH;AAEJ,GA1BD;AA4BH,CA7BD;;AA+BAc,MAAM,CAACC,OAAP,GAAiB/B,iBAAjB","sourcesContent":["var util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar FreegeoipGeocoder = function FreegeoipGeocoder(httpAdapter) {\n    this.supportIPv4   = true;\n    this.supportIPv6   = true;\n    this.supportAddress = false;\n    FreegeoipGeocoder.super_.call(this, httpAdapter);\n};\n\nutil.inherits(FreegeoipGeocoder, AbstractGeocoder);\n\n// WS endpoint\nFreegeoipGeocoder.prototype._endpoint = 'https://freegeoip.net/json/';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (IP only)\n* @param <function> callback Callback method\n*/\nFreegeoipGeocoder.prototype._geocode = function(value, callback) {\n    this.httpAdapter.get(this._endpoint + value , { }, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n\n            var results = [];\n\n            results.push({\n                'ip' : result.ip,\n                'countryCode' : result.country_code,\n                'country' : result.country_name,\n                'regionCode' : result.region_code,\n                'regionName' : result.region_name,\n                'city' : result.city,\n                'zipcode' : result.zip_code,\n                'timeZone' : result.time_zone,\n                'latitude' : result.latitude,\n                'longitude' : result.longitude,\n                'metroCode' : result.metro_code\n\n            });\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nmodule.exports = FreegeoipGeocoder;\n"]},"metadata":{},"sourceType":"script"}