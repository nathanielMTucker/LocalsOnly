{"ast":null,"code":"'use strict';\n\nconst Helper = require('./helper.js');\n\nconst Geocoder = require('./geocoder.js');\n\nconst HttpAdapter = require('./httpadapter/httpadapter.js');\n\nconst HttpsAdapter = require('./httpadapter/httpsadapter.js');\n\nconst RequestAdapter = require('./httpadapter/requestadapter.js');\n\nconst FetchAdapter = require('./httpadapter/fetchadapter.js');\n\nvar GoogleGeocoder = require('./geocoder/googlegeocoder.js');\n\nvar HereGeocoder = require('./geocoder/heregeocoder.js');\n\nvar AGOLGeocoder = require('./geocoder/agolgeocoder.js');\n\nvar FreegeoipGeocoder = require('./geocoder/freegeoipgeocoder.js');\n\nvar DataScienceToolkitGeocoder = require('./geocoder/datasciencetoolkitgeocoder.js');\n\nvar OpenStreetMapGeocoder = require('./geocoder/openstreetmapgeocoder.js');\n\nvar PickPointGeocoder = require('./geocoder/pickpointgeocoder.js');\n\nvar LocationIQGeocoder = require('./geocoder/locationiqgeocoder.js');\n\nvar MapQuestGeocoder = require('./geocoder/mapquestgeocoder.js');\n\nvar MapzenGeocoder = require('./geocoder/mapzengeocoder.js');\n\nvar OpenMapQuestGeocoder = require('./geocoder/openmapquestgeocoder.js');\n\nvar YandexGeocoder = require('./geocoder/yandexgeocoder.js');\n\nvar GeocodioGeocoder = require('./geocoder/geocodiogeocoder.js');\n\nvar OpenCageGeocoder = require('./geocoder/opencagegeocoder.js');\n\nvar NominatimMapquestGeocoder = require('./geocoder/nominatimmapquestgeocoder.js');\n\nvar TomTomGeocoder = require('./geocoder/tomtomgeocoder.js');\n\nvar VirtualEarthGeocoder = require('./geocoder/virtualearth.js');\n\nvar SmartyStreets = require('./geocoder/smartystreetsgeocoder.js');\n\nvar TeleportGeocoder = require('./geocoder/teleportgeocoder.js');\n\nvar OpendataFranceGeocoder = require('./geocoder/opendatafrancegeocoder.js');\n/**\n * Geocoder Facotry\n */\n\n\nvar GeocoderFactory = {\n  /**\n   * Return an http adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getHttpAdapter: function (adapterName, options) {\n    if (adapterName === 'http') {\n      return new HttpAdapter(null, options);\n    }\n\n    if (adapterName === 'https') {\n      return new HttpsAdapter(null, options);\n    }\n\n    if (adapterName === 'request') {\n      return new RequestAdapter(null, options);\n    }\n\n    if (adapterName === 'fetch') {\n      return new FetchAdapter(options);\n    }\n  },\n\n  /**\n   * Return a geocoder adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getGeocoder: function (geocoderName, adapter, extra) {\n    if (geocoderName === 'google') {\n      return new GoogleGeocoder(adapter, {\n        clientId: extra.clientId,\n        apiKey: extra.apiKey,\n        language: extra.language,\n        region: extra.region,\n        excludePartialMatches: extra.excludePartialMatches,\n        channel: extra.channel\n      });\n    }\n\n    if (geocoderName === 'here') {\n      return new HereGeocoder(adapter, {\n        apiKey: extra.apiKey,\n        appId: extra.appId,\n        appCode: extra.appCode,\n        language: extra.language,\n        politicalView: extra.politicalView,\n        country: extra.country,\n        state: extra.state,\n        production: extra.production\n      });\n    }\n\n    if (geocoderName === 'agol') {\n      return new AGOLGeocoder(adapter, {\n        client_id: extra.client_id,\n        client_secret: extra.client_secret\n      });\n    }\n\n    if (geocoderName === 'freegeoip') {\n      return new FreegeoipGeocoder(adapter);\n    }\n\n    if (geocoderName === 'datasciencetoolkit') {\n      return new DataScienceToolkitGeocoder(adapter, {\n        host: extra.host\n      });\n    }\n\n    if (geocoderName === 'openstreetmap') {\n      return new OpenStreetMapGeocoder(adapter, {\n        language: extra.language,\n        osmServer: extra.osmServer\n      });\n    }\n\n    if (geocoderName === 'pickpoint') {\n      return new PickPointGeocoder(adapter, {\n        language: extra.language,\n        apiKey: extra.apiKey\n      });\n    }\n\n    if (geocoderName === 'locationiq') {\n      return new LocationIQGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'mapquest') {\n      return new MapQuestGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'mapzen') {\n      return new MapzenGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'openmapquest') {\n      return new OpenMapQuestGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'yandex') {\n      return new YandexGeocoder(adapter, {\n        apiKey: extra.apiKey,\n        language: extra.language,\n        results: extra.results,\n        skip: extra.skip,\n        kind: extra.kind,\n        bbox: extra.bbox,\n        rspn: extra.rspn\n      });\n    }\n\n    if (geocoderName === 'geocodio') {\n      return new GeocodioGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'opencage') {\n      return new OpenCageGeocoder(adapter, extra.apiKey, extra);\n    }\n\n    if (geocoderName === 'nominatimmapquest') {\n      return new NominatimMapquestGeocoder(adapter, {\n        language: extra.language,\n        apiKey: extra.apiKey\n      });\n    }\n\n    if (geocoderName === 'tomtom') {\n      return new TomTomGeocoder(adapter, {\n        apiKey: extra.apiKey\n      });\n    }\n\n    if (geocoderName === 'virtualearth') {\n      return new VirtualEarthGeocoder(adapter, {\n        apiKey: extra.apiKey\n      });\n    }\n\n    if (geocoderName === 'smartystreets') {\n      return new SmartyStreets(adapter, extra.auth_id, extra.auth_token);\n    }\n\n    if (geocoderName === 'teleport') {\n      return new TeleportGeocoder(adapter, extra.apiKey, extra);\n    }\n\n    if (geocoderName === 'opendatafrance') {\n      return new OpendataFranceGeocoder(adapter);\n    }\n\n    throw new Error('No geocoder provider find for : ' + geocoderName);\n  },\n\n  /**\n   * Return an formatter adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getFormatter: function (formatterName, extra) {\n    if (formatterName === 'gpx') {\n      var GpxFormatter = require('./formatter/gpxformatter.js');\n\n      return new GpxFormatter();\n    }\n\n    if (formatterName === 'string') {\n      var StringFormatter = require('./formatter/stringformatter.js');\n\n      return new StringFormatter(extra.formatterPattern);\n    }\n  },\n\n  /**\n   * Return a geocoder\n   * @param  <string|object> geocoderAdapter Geocoder adapter name or adapter object\n   * @param  <string|object> httpAdapter     Http adapter name or adapter object\n   * @param  <array>         extra           Extra parameters array\n   * @return <object>\n   */\n  getGeocoder: function (geocoderAdapter, httpAdapter, extra) {\n    if (typeof geocoderAdapter === 'object') {\n      extra = geocoderAdapter;\n      geocoderAdapter = null;\n      httpAdapter = null;\n    }\n\n    if (!extra) {\n      extra = {};\n    }\n\n    if (extra.httpAdapter) {\n      httpAdapter = extra.httpAdapter;\n    }\n\n    if (extra.provider) {\n      geocoderAdapter = extra.provider;\n    }\n\n    if (!httpAdapter) {\n      httpAdapter = 'fetch';\n    }\n\n    if (!geocoderAdapter) {\n      geocoderAdapter = 'google';\n    }\n\n    if (Helper.isString(httpAdapter)) {\n      httpAdapter = this._getHttpAdapter(httpAdapter, extra);\n    }\n\n    if (Helper.isString(geocoderAdapter)) {\n      geocoderAdapter = this._getGeocoder(geocoderAdapter, httpAdapter, extra);\n    }\n\n    var formatter = extra.formatter;\n\n    if (Helper.isString(formatter)) {\n      formatter = this._getFormatter(formatter, extra);\n    }\n\n    return new Geocoder(geocoderAdapter, formatter);\n  }\n};\nmodule.exports = GeocoderFactory;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoderfactory.js"],"names":["Helper","require","Geocoder","HttpAdapter","HttpsAdapter","RequestAdapter","FetchAdapter","GoogleGeocoder","HereGeocoder","AGOLGeocoder","FreegeoipGeocoder","DataScienceToolkitGeocoder","OpenStreetMapGeocoder","PickPointGeocoder","LocationIQGeocoder","MapQuestGeocoder","MapzenGeocoder","OpenMapQuestGeocoder","YandexGeocoder","GeocodioGeocoder","OpenCageGeocoder","NominatimMapquestGeocoder","TomTomGeocoder","VirtualEarthGeocoder","SmartyStreets","TeleportGeocoder","OpendataFranceGeocoder","GeocoderFactory","_getHttpAdapter","adapterName","options","_getGeocoder","geocoderName","adapter","extra","clientId","apiKey","language","region","excludePartialMatches","channel","appId","appCode","politicalView","country","state","production","client_id","client_secret","host","osmServer","results","skip","kind","bbox","rspn","auth_id","auth_token","Error","_getFormatter","formatterName","GpxFormatter","StringFormatter","formatterPattern","getGeocoder","geocoderAdapter","httpAdapter","provider","isString","formatter","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Helper = require('./helper.js');\nconst Geocoder = require('./geocoder.js');\n\nconst HttpAdapter = require('./httpadapter/httpadapter.js');\nconst HttpsAdapter = require('./httpadapter/httpsadapter.js');\nconst RequestAdapter = require('./httpadapter/requestadapter.js');\nconst FetchAdapter = require('./httpadapter/fetchadapter.js');\n\nvar GoogleGeocoder = require('./geocoder/googlegeocoder.js');\nvar HereGeocoder = require('./geocoder/heregeocoder.js');\nvar AGOLGeocoder = require('./geocoder/agolgeocoder.js');\nvar FreegeoipGeocoder = require('./geocoder/freegeoipgeocoder.js');\nvar DataScienceToolkitGeocoder = require('./geocoder/datasciencetoolkitgeocoder.js');\nvar OpenStreetMapGeocoder = require('./geocoder/openstreetmapgeocoder.js');\nvar PickPointGeocoder = require('./geocoder/pickpointgeocoder.js');\nvar LocationIQGeocoder = require('./geocoder/locationiqgeocoder.js');\nvar MapQuestGeocoder = require('./geocoder/mapquestgeocoder.js');\nvar MapzenGeocoder = require('./geocoder/mapzengeocoder.js');\nvar OpenMapQuestGeocoder = require('./geocoder/openmapquestgeocoder.js');\nvar YandexGeocoder = require('./geocoder/yandexgeocoder.js');\nvar GeocodioGeocoder = require('./geocoder/geocodiogeocoder.js');\nvar OpenCageGeocoder = require('./geocoder/opencagegeocoder.js');\nvar NominatimMapquestGeocoder = require('./geocoder/nominatimmapquestgeocoder.js');\nvar TomTomGeocoder = require('./geocoder/tomtomgeocoder.js');\nvar VirtualEarthGeocoder = require('./geocoder/virtualearth.js');\nvar SmartyStreets = require('./geocoder/smartystreetsgeocoder.js');\nvar TeleportGeocoder = require('./geocoder/teleportgeocoder.js');\nvar OpendataFranceGeocoder = require('./geocoder/opendatafrancegeocoder.js');\n\n/**\n * Geocoder Facotry\n */\nvar GeocoderFactory = {\n  /**\n   * Return an http adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getHttpAdapter: function(adapterName, options) {\n    if (adapterName === 'http') {\n      return new HttpAdapter(null, options);\n    }\n    if (adapterName === 'https') {\n      return new HttpsAdapter(null, options);\n    }\n    if (adapterName === 'request') {\n      return new RequestAdapter(null, options);\n    }\n\n    if (adapterName === 'fetch') {\n      return new FetchAdapter(options);\n    }\n  },\n  /**\n   * Return a geocoder adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getGeocoder: function(geocoderName, adapter, extra) {\n    if (geocoderName === 'google') {\n      return new GoogleGeocoder(adapter, {\n        clientId: extra.clientId,\n        apiKey: extra.apiKey,\n        language: extra.language,\n        region: extra.region,\n        excludePartialMatches: extra.excludePartialMatches,\n        channel: extra.channel\n      });\n    }\n    if (geocoderName === 'here') {\n      return new HereGeocoder(adapter, {\n        apiKey: extra.apiKey,\n        appId: extra.appId,\n        appCode: extra.appCode,\n        language: extra.language,\n        politicalView: extra.politicalView,\n        country: extra.country,\n        state: extra.state,\n        production: extra.production\n      });\n    }\n    if (geocoderName === 'agol') {\n      return new AGOLGeocoder(adapter, {\n        client_id: extra.client_id,\n        client_secret: extra.client_secret\n      });\n    }\n    if (geocoderName === 'freegeoip') {\n      return new FreegeoipGeocoder(adapter);\n    }\n    if (geocoderName === 'datasciencetoolkit') {\n      return new DataScienceToolkitGeocoder(adapter, { host: extra.host });\n    }\n    if (geocoderName === 'openstreetmap') {\n      return new OpenStreetMapGeocoder(adapter, {\n        language: extra.language,\n        osmServer: extra.osmServer\n      });\n    }\n    if (geocoderName === 'pickpoint') {\n      return new PickPointGeocoder(adapter, {\n        language: extra.language,\n        apiKey: extra.apiKey\n      });\n    }\n    if (geocoderName === 'locationiq') {\n      return new LocationIQGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'mapquest') {\n      return new MapQuestGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'mapzen') {\n      return new MapzenGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'openmapquest') {\n      return new OpenMapQuestGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'yandex') {\n      return new YandexGeocoder(adapter, {\n        apiKey: extra.apiKey,\n        language: extra.language,\n        results: extra.results,\n        skip: extra.skip,\n        kind: extra.kind,\n        bbox: extra.bbox,\n        rspn: extra.rspn\n      });\n    }\n    if (geocoderName === 'geocodio') {\n      return new GeocodioGeocoder(adapter, extra.apiKey);\n    }\n    if (geocoderName === 'opencage') {\n      return new OpenCageGeocoder(adapter, extra.apiKey, extra);\n    }\n    if (geocoderName === 'nominatimmapquest') {\n      return new NominatimMapquestGeocoder(adapter, {\n        language: extra.language,\n        apiKey: extra.apiKey\n      });\n    }\n    if (geocoderName === 'tomtom') {\n      return new TomTomGeocoder(adapter, { apiKey: extra.apiKey });\n    }\n    if (geocoderName === 'virtualearth') {\n      return new VirtualEarthGeocoder(adapter, { apiKey: extra.apiKey });\n    }\n    if (geocoderName === 'smartystreets') {\n      return new SmartyStreets(adapter, extra.auth_id, extra.auth_token);\n    }\n    if (geocoderName === 'teleport') {\n      return new TeleportGeocoder(adapter, extra.apiKey, extra);\n    }\n    if (geocoderName === 'opendatafrance') {\n      return new OpendataFranceGeocoder(adapter);\n    }\n\n    throw new Error('No geocoder provider find for : ' + geocoderName);\n  },\n  /**\n   * Return an formatter adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getFormatter: function(formatterName, extra) {\n    if (formatterName === 'gpx') {\n      var GpxFormatter = require('./formatter/gpxformatter.js');\n\n      return new GpxFormatter();\n    }\n\n    if (formatterName === 'string') {\n      var StringFormatter = require('./formatter/stringformatter.js');\n\n      return new StringFormatter(extra.formatterPattern);\n    }\n  },\n  /**\n   * Return a geocoder\n   * @param  <string|object> geocoderAdapter Geocoder adapter name or adapter object\n   * @param  <string|object> httpAdapter     Http adapter name or adapter object\n   * @param  <array>         extra           Extra parameters array\n   * @return <object>\n   */\n  getGeocoder: function(geocoderAdapter, httpAdapter, extra) {\n    if (typeof geocoderAdapter === 'object') {\n      extra = geocoderAdapter;\n      geocoderAdapter = null;\n      httpAdapter = null;\n    }\n\n    if (!extra) {\n      extra = {};\n    }\n\n    if (extra.httpAdapter) {\n      httpAdapter = extra.httpAdapter;\n    }\n\n    if (extra.provider) {\n      geocoderAdapter = extra.provider;\n    }\n\n    if (!httpAdapter) {\n      httpAdapter = 'fetch';\n    }\n\n    if (!geocoderAdapter) {\n      geocoderAdapter = 'google';\n    }\n\n    if (Helper.isString(httpAdapter)) {\n      httpAdapter = this._getHttpAdapter(httpAdapter, extra);\n    }\n\n    if (Helper.isString(geocoderAdapter)) {\n      geocoderAdapter = this._getGeocoder(geocoderAdapter, httpAdapter, extra);\n    }\n\n    var formatter = extra.formatter;\n\n    if (Helper.isString(formatter)) {\n      formatter = this._getFormatter(formatter, extra);\n    }\n\n    return new Geocoder(geocoderAdapter, formatter);\n  }\n};\n\nmodule.exports = GeocoderFactory;\n"]},"metadata":{},"sourceType":"script"}