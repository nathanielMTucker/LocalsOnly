{"ast":null,"code":"var querystring = require('querystring'),\n    util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar MapQuestGeocoder = function MapQuestGeocoder(httpAdapter, apiKey) {\n  MapQuestGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error('MapQuestGeocoder needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n};\n\nutil.inherits(MapQuestGeocoder, AbstractGeocoder);\nMapQuestGeocoder.prototype._endpoint = 'https://www.mapquestapi.com/geocoding/v1';\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\n\nMapQuestGeocoder.prototype._geocode = function (value, callback) {\n  var params = {\n    'key': querystring.unescape(this.apiKey)\n  };\n\n  if (typeof value === 'object') {\n    if (value.address) {\n      params.street = value.address;\n    }\n\n    if (value.country) {\n      params.country = value.country;\n    }\n\n    if (value.zipcode) {\n      params.postalCode = value.zipcode;\n    }\n\n    if (value.city) {\n      params.city = value.city;\n    }\n  } else {\n    params.location = value;\n  }\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/address', params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.info.statuscode !== 0) {\n        return callback(new Error('Status is ' + result.info.statuscode + ' ' + result.info.messages[0]), {\n          raw: result\n        });\n      }\n\n      var results = [];\n\n      if (result.results && result.results.length) {\n        var locations = result.results[0].locations;\n\n        for (var i = 0; i < locations.length; i++) {\n          results.push(_this._formatResult(locations[i]));\n        }\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nMapQuestGeocoder.prototype._formatResult = function (result) {\n  return {\n    formattedAddress: [result.street, result.adminArea5, (result.adminArea3 + ' ' + result.postalCode).trim(), result.adminArea1].join(', '),\n    'latitude': result.latLng.lat,\n    'longitude': result.latLng.lng,\n    'country': null,\n    'city': result.adminArea5,\n    'stateCode': result.adminArea3,\n    'zipcode': result.postalCode,\n    'streetName': result.street,\n    'streetNumber': null,\n    'countryCode': result.adminArea1\n  };\n};\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n* @param <function> callback Callback method\n*/\n\n\nMapQuestGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse', {\n    'location': lat + ',' + lng,\n    'key': querystring.unescape(this.apiKey)\n  }, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      var locations = result.results[0].locations;\n\n      for (var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = MapQuestGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/mapquestgeocoder.js"],"names":["querystring","require","util","AbstractGeocoder","MapQuestGeocoder","httpAdapter","apiKey","super_","call","Error","inherits","prototype","_endpoint","_geocode","value","callback","params","unescape","address","street","country","zipcode","postalCode","city","location","_this","get","err","result","info","statuscode","messages","raw","results","length","locations","i","push","_formatResult","formattedAddress","adminArea5","adminArea3","trim","adminArea1","join","latLng","lat","lng","_reverse","query","lon","module","exports"],"mappings":"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","sourcesContent":["var querystring      = require('querystring'),\n    util             = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar MapQuestGeocoder = function MapQuestGeocoder(httpAdapter, apiKey) {\n\n  MapQuestGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n\n    throw new Error('MapQuestGeocoder needs an apiKey');\n  }\n\n  this.apiKey = apiKey;\n};\n\nutil.inherits(MapQuestGeocoder, AbstractGeocoder);\n\nMapQuestGeocoder.prototype._endpoint = 'https://www.mapquestapi.com/geocoding/v1';\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\nMapQuestGeocoder.prototype._geocode = function(value, callback) {\n  var params = {'key' : querystring.unescape(this.apiKey)};\n  if (typeof value === 'object') {\n    if (value.address) {\n      params.street = value.address;\n    }\n    if (value.country) {\n      params.country = value.country;\n    }\n    if (value.zipcode) {\n      params.postalCode = value.zipcode;\n    }\n    if (value.city) {\n      params.city = value.city;\n    }\n  } else {\n    params.location = value;\n  }\n\n  var _this = this;\n  this.httpAdapter.get(this._endpoint + '/address' , params, function(err, result) {\n    if (err) {\n        return callback(err);\n    } else {\n      if (result.info.statuscode !== 0) {\n        return callback(new Error('Status is ' + result.info.statuscode + ' ' + result.info.messages[0]),{raw:result});\n      }\n\n      var results = [];\n      if (result.results && result.results.length) {\n        var locations = result.results[0].locations;\n\n        for(var i = 0; i < locations.length; i++) {\n          results.push(_this._formatResult(locations[i]));\n        }\n      }\n\n      results.raw = result;\n\n      callback(false, results);\n    }\n  });\n};\n\nMapQuestGeocoder.prototype._formatResult = function(result) {\n  return {\n    formattedAddress: [result.street, result.adminArea5, (result.adminArea3 + ' ' + result.postalCode).trim(), result.adminArea1].join(', '),\n    'latitude' : result.latLng.lat,\n    'longitude' : result.latLng.lng,\n    'country' : null,\n    'city' : result.adminArea5,\n    'stateCode' : result.adminArea3,\n    'zipcode' : result.postalCode,\n    'streetName': result.street,\n    'streetNumber' : null,\n    'countryCode' : result.adminArea1\n  };\n};\n\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n* @param <function> callback Callback method\n*/\nMapQuestGeocoder.prototype._reverse = function(query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  this.httpAdapter.get(this._endpoint + '/reverse' , { 'location' : lat + ',' + lng, 'key' : querystring.unescape(this.apiKey)}, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      var locations = result.results[0].locations;\n\n      for(var i = 0; i < locations.length; i++) {\n        results.push(_this._formatResult(locations[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = MapQuestGeocoder;\n"]},"metadata":{},"sourceType":"script"}