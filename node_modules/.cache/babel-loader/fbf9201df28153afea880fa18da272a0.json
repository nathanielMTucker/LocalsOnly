{"ast":null,"code":"var util = require('util'),\n    net = require('net'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar DataScienceToolkitGeocoder = function DataScienceToolkitGeocoder(httpAdapter, options) {\n  this.options = ['host'];\n  this.supportIPv4 = true;\n  DataScienceToolkitGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(DataScienceToolkitGeocoder, AbstractGeocoder);\n/**\n* Build DSTK endpoint, allows for local DSTK installs\n* @param <string>   value    Value to geocode (Address or IPv4)\n*/\n\nDataScienceToolkitGeocoder.prototype._endpoint = function (value) {\n  var ep = {};\n  var host = 'www.datasciencetoolkit.org';\n\n  if (this.options.host) {\n    host = this.options.host;\n  }\n\n  ep.ipv4Endpoint = 'http://' + host + '/ip2coordinates/';\n  ep.street2coordinatesEndpoint = 'http://' + host + '/street2coordinates/';\n  return net.isIPv4(value) ? ep.ipv4Endpoint : ep.street2coordinatesEndpoint;\n};\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address or IPv4)\n* @param <function> callback Callback method\n*/\n\n\nDataScienceToolkitGeocoder.prototype._geocode = function (value, callback) {\n  var ep = this._endpoint(value);\n\n  this.httpAdapter.get(ep + value, {}, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      result = result[value];\n\n      if (!result) {\n        return callback(new Error('Could not geocode \"' + value + '\".'));\n      }\n\n      var results = [];\n      results.push({\n        'latitude': result.latitude,\n        'longitude': result.longitude,\n        'country': result.country_name,\n        'city': result.city || result.locality,\n        'state': result.state || result.region,\n        'zipcode': result.postal_code,\n        'streetName': result.street_name,\n        'streetNumber': result.street_number,\n        'countryCode': result.country_code\n      });\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = DataScienceToolkitGeocoder;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly/frontend/node_modules/node-geocoder/lib/geocoder/datasciencetoolkitgeocoder.js"],"names":["util","require","net","AbstractGeocoder","DataScienceToolkitGeocoder","httpAdapter","options","supportIPv4","super_","call","inherits","prototype","_endpoint","value","ep","host","ipv4Endpoint","street2coordinatesEndpoint","isIPv4","_geocode","callback","get","err","result","Error","results","push","latitude","longitude","country_name","city","locality","state","region","postal_code","street_name","street_number","country_code","raw","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAeC,OAAO,CAAC,MAAD,CAA9B;AAAA,IACIC,GAAG,GAAgBD,OAAO,CAAC,KAAD,CAD9B;AAAA,IAEIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAF9B;AAIA;;;;;AAGA,IAAIG,0BAA0B,GAAG,SAASA,0BAAT,CAAoCC,WAApC,EAAgDC,OAAhD,EAAyD;AACtF,OAAKA,OAAL,GAAmB,CAAC,MAAD,CAAnB;AACA,OAAKC,WAAL,GAAmB,IAAnB;AAEAH,EAAAA,0BAA0B,CAACI,MAA3B,CAAkCC,IAAlC,CAAuC,IAAvC,EAA6CJ,WAA7C,EAA0DC,OAA1D;AACH,CALD;;AAOAN,IAAI,CAACU,QAAL,CAAcN,0BAAd,EAA0CD,gBAA1C;AAEA;;;;;AAIAC,0BAA0B,CAACO,SAA3B,CAAqCC,SAArC,GAAiD,UAASC,KAAT,EAAgB;AAC9D,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIC,IAAI,GAAG,4BAAX;;AAEA,MAAG,KAAKT,OAAL,CAAaS,IAAhB,EAAsB;AACjBA,IAAAA,IAAI,GAAI,KAAKT,OAAL,CAAaS,IAArB;AACH;;AAEDD,EAAAA,EAAE,CAACE,YAAH,GAAkB,YAAYD,IAAZ,GAAmB,kBAArC;AACAD,EAAAA,EAAE,CAACG,0BAAH,GAAgC,YAAYF,IAAZ,GAAmB,sBAAnD;AAEA,SAAOb,GAAG,CAACgB,MAAJ,CAAWL,KAAX,IAAoBC,EAAE,CAACE,YAAvB,GAAsCF,EAAE,CAACG,0BAAhD;AACH,CAZD;AAcA;;;;;;;AAKAb,0BAA0B,CAACO,SAA3B,CAAqCQ,QAArC,GAAgD,UAASN,KAAT,EAAgBO,QAAhB,EAA0B;AAEtE,MAAIN,EAAE,GAAG,KAAKF,SAAL,CAAeC,KAAf,CAAT;;AACA,OAAKR,WAAL,CAAiBgB,GAAjB,CAAqBP,EAAE,GAAGD,KAA1B,EAAkC,EAAlC,EAAuC,UAASS,GAAT,EAAcC,MAAd,EAAsB;AACzD,QAAID,GAAJ,EAAS;AACL,aAAOF,QAAQ,CAACE,GAAD,CAAf;AACH,KAFD,MAEO;AACHC,MAAAA,MAAM,GAAGA,MAAM,CAACV,KAAD,CAAf;;AACA,UAAI,CAACU,MAAL,EAAa;AACT,eAAOH,QAAQ,CAAC,IAAII,KAAJ,CAAU,wBAAwBX,KAAxB,GAAgC,IAA1C,CAAD,CAAf;AACH;;AAED,UAAIY,OAAO,GAAG,EAAd;AAEAA,MAAAA,OAAO,CAACC,IAAR,CAAa;AACT,oBAAaH,MAAM,CAACI,QADX;AAET,qBAAcJ,MAAM,CAACK,SAFZ;AAGT,mBAAYL,MAAM,CAACM,YAHV;AAIT,gBAASN,MAAM,CAACO,IAAP,IAAeP,MAAM,CAACQ,QAJtB;AAKT,iBAAUR,MAAM,CAACS,KAAP,IAAgBT,MAAM,CAACU,MALxB;AAMT,mBAAYV,MAAM,CAACW,WANV;AAOT,sBAAcX,MAAM,CAACY,WAPZ;AAQT,wBAAiBZ,MAAM,CAACa,aARf;AAST,uBAAgBb,MAAM,CAACc;AATd,OAAb;AAYAZ,MAAAA,OAAO,CAACa,GAAR,GAAcf,MAAd;AACAH,MAAAA,QAAQ,CAAC,KAAD,EAAQK,OAAR,CAAR;AACH;AAEJ,GA3BD;AA6BH,CAhCD;;AAkCAc,MAAM,CAACC,OAAP,GAAiBpC,0BAAjB","sourcesContent":["var util             = require('util'),\n    net              = require('net'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar DataScienceToolkitGeocoder = function DataScienceToolkitGeocoder(httpAdapter,options) {\n    this.options     = ['host'];\n    this.supportIPv4 = true;\n\n    DataScienceToolkitGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(DataScienceToolkitGeocoder, AbstractGeocoder);\n\n/**\n* Build DSTK endpoint, allows for local DSTK installs\n* @param <string>   value    Value to geocode (Address or IPv4)\n*/\nDataScienceToolkitGeocoder.prototype._endpoint = function(value) {\n   var ep = { };\n   var host = 'www.datasciencetoolkit.org';\n\n   if(this.options.host) {\n        host =  this.options.host;\n    }\n\n    ep.ipv4Endpoint = 'http://' + host + '/ip2coordinates/';\n    ep.street2coordinatesEndpoint = 'http://' + host + '/street2coordinates/';\n\n    return net.isIPv4(value) ? ep.ipv4Endpoint : ep.street2coordinatesEndpoint;\n};\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address or IPv4)\n* @param <function> callback Callback method\n*/\nDataScienceToolkitGeocoder.prototype._geocode = function(value, callback) {\n\n    var ep = this._endpoint(value);\n    this.httpAdapter.get(ep + value , { }, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n            result = result[value];\n            if (!result) {\n                return callback(new Error('Could not geocode \"' + value + '\".'));\n            }\n\n            var results = [];\n\n            results.push({\n                'latitude' : result.latitude,\n                'longitude' : result.longitude,\n                'country' : result.country_name,\n                'city' : result.city || result.locality,\n                'state' : result.state || result.region,\n                'zipcode' : result.postal_code,\n                'streetName': result.street_name,\n                'streetNumber' : result.street_number,\n                'countryCode' : result.country_code\n            });\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nmodule.exports = DataScienceToolkitGeocoder;\n"]},"metadata":{},"sourceType":"script"}