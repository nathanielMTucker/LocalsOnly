{"ast":null,"code":"// inspired from package haversine originally By Nick Justice (niix) at https://github.com/niix/haversine\n\n/**\n * converts a number to radian value\n * @param {number} num a number\n */\nfunction toRadian(num) {\n  return num * Math.PI / 180;\n}\n/**\n * finds the distance between two lat-long values\n * @param {object} start start lat-long\n * @param {object} end end lat-long\n * @param {object} options any options\n */\n\n\nfunction distance(start, end) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // init constants\n  var km = 6371;\n  var mile = 3960; // convert everything to radians\n\n  var R = options.unit === 'mile' ? mile : km;\n  var dLat = toRadian(end.latitude - start.latitude);\n  var dLon = toRadian(end.longitude - start.longitude);\n  var lat1 = toRadian(start.latitude);\n  var lat2 = toRadian(end.latitude);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var distanceValue = 0;\n\n  if (options.threshold) {\n    distanceValue = options.threshold > R * c;\n  } else {\n    distanceValue = R * c;\n  }\n\n  return distanceValue;\n}\n\nmodule.exports.distance = distance;","map":{"version":3,"sources":["C:/Users/nmtuc/Desktop/Dev/web/localsonly_main/client/node_modules/reverse-geocode/lib/haversine.js"],"names":["toRadian","num","Math","PI","distance","start","end","options","km","mile","R","unit","dLat","latitude","dLon","longitude","lat1","lat2","a","sin","cos","c","atan2","sqrt","distanceValue","threshold","module","exports"],"mappings":"AAAA;;AAEA;;;;AAIA,SAASA,QAAT,CAAmBC,GAAnB,EAAwB;AACtB,SAAQA,GAAG,GAAGC,IAAI,CAACC,EAAZ,GAAkB,GAAzB;AACD;AAED;;;;;;;;AAMA,SAASC,QAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA6C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC3C;AACA,MAAMC,EAAE,GAAG,IAAX;AACA,MAAMC,IAAI,GAAG,IAAb,CAH2C,CAK3C;;AACA,MAAMC,CAAC,GAAGH,OAAO,CAACI,IAAR,KAAiB,MAAjB,GAA0BF,IAA1B,GAAiCD,EAA3C;AACA,MAAMI,IAAI,GAAGZ,QAAQ,CAACM,GAAG,CAACO,QAAJ,GAAeR,KAAK,CAACQ,QAAtB,CAArB;AACA,MAAMC,IAAI,GAAGd,QAAQ,CAACM,GAAG,CAACS,SAAJ,GAAgBV,KAAK,CAACU,SAAvB,CAArB;AACA,MAAMC,IAAI,GAAGhB,QAAQ,CAACK,KAAK,CAACQ,QAAP,CAArB;AACA,MAAMI,IAAI,GAAGjB,QAAQ,CAACM,GAAG,CAACO,QAAL,CAArB;AAEA,MAAMK,CAAC,GACLhB,IAAI,CAACiB,GAAL,CAASP,IAAI,GAAG,CAAhB,IAAqBV,IAAI,CAACiB,GAAL,CAASP,IAAI,GAAG,CAAhB,CAArB,GACAV,IAAI,CAACiB,GAAL,CAASL,IAAI,GAAG,CAAhB,IAAqBZ,IAAI,CAACiB,GAAL,CAASL,IAAI,GAAG,CAAhB,CAArB,GAA0CZ,IAAI,CAACkB,GAAL,CAASJ,IAAT,CAA1C,GAA2Dd,IAAI,CAACkB,GAAL,CAASH,IAAT,CAF7D;AAGA,MAAMI,CAAC,GAAG,IAAInB,IAAI,CAACoB,KAAL,CAAWpB,IAAI,CAACqB,IAAL,CAAUL,CAAV,CAAX,EAAyBhB,IAAI,CAACqB,IAAL,CAAU,IAAIL,CAAd,CAAzB,CAAd;AAEA,MAAIM,aAAa,GAAG,CAApB;;AAEA,MAAIjB,OAAO,CAACkB,SAAZ,EAAuB;AACrBD,IAAAA,aAAa,GAAGjB,OAAO,CAACkB,SAAR,GAAoBf,CAAC,GAAGW,CAAxC;AACD,GAFD,MAEO;AACLG,IAAAA,aAAa,GAAGd,CAAC,GAAGW,CAApB;AACD;;AAED,SAAOG,aAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,CAAevB,QAAf,GAA0BA,QAA1B","sourcesContent":["// inspired from package haversine originally By Nick Justice (niix) at https://github.com/niix/haversine\n\n/**\n * converts a number to radian value\n * @param {number} num a number\n */\nfunction toRadian (num) {\n  return (num * Math.PI) / 180\n}\n\n/**\n * finds the distance between two lat-long values\n * @param {object} start start lat-long\n * @param {object} end end lat-long\n * @param {object} options any options\n */\nfunction distance (start, end, options = {}) {\n  // init constants\n  const km = 6371\n  const mile = 3960\n\n  // convert everything to radians\n  const R = options.unit === 'mile' ? mile : km\n  const dLat = toRadian(end.latitude - start.latitude)\n  const dLon = toRadian(end.longitude - start.longitude)\n  const lat1 = toRadian(start.latitude)\n  const lat2 = toRadian(end.latitude)\n\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n\n  let distanceValue = 0\n\n  if (options.threshold) {\n    distanceValue = options.threshold > R * c\n  } else {\n    distanceValue = R * c\n  }\n\n  return distanceValue\n}\n\nmodule.exports.distance = distance\n"]},"metadata":{},"sourceType":"script"}